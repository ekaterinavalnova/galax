
// ‚úÖ –ö–æ–Ω—Ñ–∏–≥: N –¥–Ω–µ–π –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
const BLACKLIST_DAYS = 30;
const ITER = 200;
// ‚úÖ –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä WhatsApp –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
const WHATSAPP_CONTACT = "+793********";
//const WHATSAPP_CONTACT = "+799********";
const DONOR_DESC = "–ö–∞—Ç—è. –†–∞–±–æ—Ç–∞—é –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–º, —Å–æ–∑–¥–∞—é —É—é—Ç–Ω—ã–µ –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å—Ç–∏–ª—å –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å. –£–≤–ª–µ–∫–∞—é—Å—å –π–æ–≥–æ–π, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π - –ª—é–±–ª—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–Ω–∫–æ—Å—Ç—è—Ö –º—ã—à–ª–µ–Ω–∏—è –∏ –∏—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å. ";
//const DONOR_DESC = "–í–∏–∫—Ç–æ—Ä–∏—è. –ò–≥—Ä–∞—é –Ω–∞ –±–ª–æ–∫-—Ñ–ª–µ–π—Ç–µ, –∑–∞–Ω–∏–º–∞—é—Å—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º, —á–∏—Ç–∞—é –Ω–∞—É—á–Ω–ø–æ–∫, –∏–∑—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ñ–µ—Ä—É –ø—Ä–æ–¥–∞–∂";
const DONOR_NAME = "–ö–∞—Ç—è";



 
if (!window.openAICache) window.openAICache = new Map();

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithRetry(url, options, retries = 3, timeout = 10000) {
	for (let i = 0; i < retries; i++) {
		try {
			const controller = new AbortController();
			const signal = controller.signal;
			const fetchPromise = fetch(url, { ...options, signal });

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
			const timeoutId = setTimeout(() => controller.abort(), timeout);

			const response = await fetchPromise;
			clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ

			if (!response.ok) {
				throw new Error(`HTTP error! Status: ${response.status}`);
			}

			return await response.json();
		} catch (error) {
			console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (${i + 1}/${retries}): ${error.message}`);
			if (i === retries - 1) {
				throw new Error("‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API.");
			}
			await new Promise(res => setTimeout(res, 1000 * (i + 1))); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
		}
	}
}
// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º Supabase —á–µ—Ä–µ–∑ ES-–º–æ–¥—É–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
window.initSupabase = (async () => {
	if (window.supabaseClient) return; // ‚úÖ –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º

	console.log("‚è≥ [initSupabase] –ó–∞–≥—Ä—É–∑–∫–∞ Supabase...");

	if ("requestIdleCallback" in window) {
		requestIdleCallback(async () => {
			const { createClient } = await import("https://esm.sh/@supabase/supabase-js@2");
			window.supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);
			console.log("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
		});
	} else {
		// ‚úÖ –§–æ–ª–±—ç–∫ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ requestIdleCallback
		setTimeout(async () => {
			const { createClient } = await import("https://esm.sh/@supabase/supabase-js@2");
			window.supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);
			console.log("‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
		}, 100);
	}
})();


// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ Supabase
window.waitForSupabase = async function () {
	if (window.supabaseClient) return; // ‚úÖ –£–∂–µ –≥–æ—Ç–æ–≤

	console.log("‚è≥ [waitForSupabase] –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase...");

	// ‚úÖ –ï—Å–ª–∏ Supabase –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é
	if (!window.supabaseClient) {
		await window.initSupabase;
	}

	// ‚úÖ –ñ–¥—ë–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI
	let attempts = 0;
	const maxAttempts = 10;
	let delay = 500;

	while (!window.supabaseClient) {
		if (attempts >= maxAttempts) {
			console.error("‚ùå [waitForSupabase] Supabase –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è!");
			throw new Error("Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è.");
		}

		console.warn(`‚è≥ [waitForSupabase] –ü–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts}...`);
		await new Promise(resolve => setTimeout(resolve, delay));

		attempts++;
		delay *= 1.5; // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
	}

	console.log("‚úÖ [waitForSupabase] Supabase –∑–∞–≥—Ä—É–∂–µ–Ω!");
};


async function getOpenAIResponse(fullPrompt) {
	try {
		if (!fullPrompt || fullPrompt.trim().length === 0) {
			console.error("‚ùå –û—à–∏–±–∫–∞: `fullPrompt` –ø—É—Å—Ç–æ–π. OpenAI –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.");
			return ;
		}

		console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...");
		//console.log("üìú –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π `fullPrompt`:", fullPrompt); // üîç –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

		const response = await fetchWithRetry("https://api.openai.com/v1/chat/completions", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"Authorization": `Bearer ${OPENAI_API_KEY}`
			},
			body: JSON.stringify({
				model: "gpt-4o-mini",
				messages: [{ role: "user", content: fullPrompt }], // –ü–µ—Ä–µ–¥–∞—ë–º fullPrompt
				temperature: 0.9,
				top_p: 0.8,
				max_tokens: 100
			})
		});

		if (!response || !response.choices || response.choices.length === 0) {
			console.warn("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback...");
			return ;
		}

		let bot_resp = response.choices[0].message.content.trim();
		console.log("üìå OpenAI –æ—Ç–≤–µ—Ç:", bot_resp);

		return bot_resp;

	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI:", error);
		return ;
	}
}



///////////////////////////////////////////////////////////////
/////////   üî•    —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å blacklist   ////////////
///////////////////////////////////////////////////////////////

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ blacklist
async function isUserBlacklisted(profileName) {
	await window.waitForSupabase();

	//==console.log(`üîç [isUserBlacklisted] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ${profileName} –≤ blacklist...`);

	try {
		const { data, error } = await window.supabaseClient
			.from("blacklist")
			.select("user_nick")
			.eq("user_nick", profileName)
			.maybeSingle();

		if (error) {
			return false;
		}

		if (data && data.user_nick === profileName) {
			//console.warn(`‚õî [isUserBlacklisted] ${profileName} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ blacklist!`);
			return true;
		}
		return false;
		
	} catch (err) {
		console.error("‚ùå [isUserBlacklisted] –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ blacklist:", err);
		return false;
	}
}



// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–∞–Ω—Ç–∏–±–æ—Ç-–∑–∞—â–∏—Ç–∞)
async function randomDelay() {
	await new Promise(resolve => setTimeout(resolve, Math.random() * (5000 - 2000) + 2000));
}




async function addToBlacklist(profileName, reason = "—Å—Ç–∞—Ä–∞—è —Ä–µ–≥–∞") {
	await window.waitForSupabase();

	try {
		const { error } = await window.supabaseClient
			.from("blacklist")
			.upsert([{ 
				user_nick: profileName, 
				reason: reason, 
				date_added: new Date().toISOString() 
			}], { onConflict: ["user_nick"] });

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ß–°:", error);
			return false;
		}

		console.log(`‚úÖ ${profileName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°!`);
		return true;
	} catch (err) {
		console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ß–°:", err);
		return false;
	}
}



// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ blacklist
async function removeFromBlacklist(profileName) {
	await window.waitForSupabase();

	const { error } = await window.supabaseClient
		.from("blacklist")
		.delete()
		.eq("user_nick", profileName);

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ blacklist:", error);
		return false;
	}

	//==console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} —É–¥–∞–ª—ë–Ω –∏–∑ blacklist.`);
	return true;
}



///////////////////////////////////////////////////////////////
///////// üî• –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å user_info_galaxy ////////////
///////////////////////////////////////////////////////////////
/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "DD.MM.YYYY" –≤ "YYYY-MM-DD"
 * @param {string} dateStr - –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD.MM.YYYY"
 * @returns {string} –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
 */
function convertDate(dateStr) {
  const parts = dateStr.split(".");
  if (parts.length !== 3) {
	throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: " + dateStr);
  }
  // parts[0] - –¥–µ–Ω—å, parts[1] - –º–µ—Å—è—Ü, parts[2] - –≥–æ–¥
  const [day, month, year] = parts;
  return `${year}-${month}-${day}`;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
const originalDate = "31.01.2022";


// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function addUser(profileName, userName, registrationDate, userCity, userAge) {
	await window.waitForSupabase();
	
	try {
		console.log(`üÜï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${profileName}...`);
		const convertedDate = convertDate(registrationDate);
		console.log(convertedDate); // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: "2022-01-31"
		userAge = userAge.replace(/[^\d]/g, "");

		// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å)
		const { data, error } = await window.supabaseClient
			.from("user_info_galaxy")
			.upsert([{ 
				user_nick: profileName, 
				user_name: userName, 
				registration_date: convertedDate, 
				user_city: userCity, 
				user_age: userAge 
			}], { onConflict: ["user_nick"] });

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
			return false;
		}

		if (data && data.length > 0) {
			console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω!`);
			return true;
		}

		console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} —É–∂–µ –±—ã–ª –≤ –±–∞–∑–µ.`);
		return true;

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ addUser():", err);
		return false;
	}
}


// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤ phone_numbers
// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤ Supabase
async function savePhoneNumber(userid, profileName, phoneNumber) {
	await window.waitForSupabase();

	try {
		console.log(`üìû –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ ${phoneNumber} –æ—Ç ${profileName} (ID: ${userid})...`);

		// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å)
		const { data, error } = await window.supabaseClient
			.from("phone_numbers")
			.upsert([{ userid, user_nick: profileName, phone_number: phoneNumber }], { onConflict: ["phone_number"] });

		// ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞:", error);
			return false;
		}

		if (data.length > 0) {
			console.log(`‚úÖ –ù–æ–º–µ—Ä ${phoneNumber} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ!`);
			return true;
		}

		// ‚úÖ –ï—Å–ª–∏ `upsert()` –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
		const { data: existingData, error: fetchError } = await window.supabaseClient
			.from("phone_numbers")
			.select("*")
			.eq("phone_number", phoneNumber)
			.limit(1);

		if (fetchError) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ:", fetchError);
			return false;
		}

		if (existingData.length > 0) {
			console.log(`‚ÑπÔ∏è –ù–æ–º–µ—Ä ${phoneNumber} —É–∂–µ –±—ã–ª –≤ –±–∞–∑–µ.`);
			return true;
		}

		console.warn("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ.");
		return false;

	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞:", err);
		return false;
	}
}


// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –≤ –ë–î
async function isPhoneNumberExists(phoneNumber) {
	await window.waitForSupabase();
	try {
		const { count, error } = await window.supabaseClient
			.from("phone_numbers")
			.select("*", { count: "exact", head: true })
			.eq("phone_number", phoneNumber);
		return count > 0;
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞:", err);
		return false;
	}
}



// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π `getUserInfo()`
async function getUserInfo(profileName) {
	await window.waitForSupabase();
	const { data, error } = await window.supabaseClient
		.from("user_info_galaxy")
		.select("*")
		.eq("user_nick", profileName)
		.maybeSingle();

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ userInfo:", error);
		return null;
	}

	//console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:`, data);
	return data;
}




// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function updateUser(profileName, updateData) {
	await window.waitForSupabase();
	try {
		const { count, error } = await window.supabaseClient
			.from("user_info_galaxy")
			.update(updateData)
			.eq("user_nick", profileName)
			.select("*", { count: "exact", head: true });
		return count > 0;
	} catch (err) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
		return false;
	}
}


// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(profileName) {
	await window.waitForSupabase();

	const { error } = await window.supabaseClient
		.from("user_info_galaxy")
		.delete()
		.eq("user_nick", profileName);

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
		return false;
	}
	//==console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.");
	return true;
}



///////////////////////////////////////////////////////////////
///////// üî• –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram_phrases ////////////
///////////////////////////////////////////////////////////////
/* async function getRandomGreeting() {
	if (!window.supabaseClient) {
		console.warn("‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
		return null;
	}

	try {
		// üì° –ó–∞–ø—Ä–æ—Å –∫ Supabase —á–µ—Ä–µ–∑ RPC
		const { data, error } = await window.supabaseClient.rpc("get_random_phrase");

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ Supabase:", error.message);
			return null;
		}

		if (!Array.isArray(data) || data.length === 0) {
			console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ `Telegram_phrases`.");
			return null;
		}

		console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞:", data[0].message);
		return data[0].message;
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã:", error);
		return null;
	}
}
 */
async function showRandomMessage() {
	const message = await getRandomGreeting();
	if (!message) console.warn("‚ö†Ô∏è –ù–µ—Ç —Ñ—Ä–∞–∑ –≤ –±–∞–∑–µ.");
	return message || "‚ö†Ô∏è –§—Ä–∞–∑ –≤ –±–∞–∑–µ –Ω–µ—Ç.";
}

async function sendGreeting(profileName, userid) {
	console.log(`üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profileName}`);

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	const greeting = getRandomGreeting(); //"–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?";

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await handleSendMessageUserInput(greeting);

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
	const messages = [{ user: "bot", text: greeting, time: new Date().toISOString() }];
	await saveChatStatus(profileName, userid, messages, 1);

	return;
}


///////////////////////////////////////////////////////////////
/////////       üî• –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å chats      ////////////
///////////////////////////////////////////////////////////////

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ –ë–î (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º)
// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–∑ –ë–î (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º)
async function getChatStatus(profileName) {
	//==console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –¥–ª—è ${profileName}...`);
	await window.waitForSupabase();

	try {
		const { data, error } = await window.supabaseClient
			.from("chats")
			.select("userid, messages, stage")
			.eq("user_nick", profileName)
			.maybeSingle();

		if (error) throw error;

		return data || { userid: null, messages: [], stage: 1 };
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ getChatStatus:", error);
		return { userid: null, messages: [], stage: 1 };
	}
}


function mergeUniqueMessages(oldMessages, newMessages) {
	if (!Array.isArray(oldMessages)) {
		console.error("–û—à–∏–±–∫–∞: oldMessages –Ω–µ –º–∞—Å—Å–∏–≤, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.");
		oldMessages = [];
	}

	const texts = new Set(oldMessages.map(msg => msg.text)); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã

	newMessages.forEach(msg => {
		if (!texts.has(msg.text.trim())) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
			oldMessages.push(msg);
			texts.add(msg.text.trim());  // –î–æ–±–∞–≤–ª—è–µ–º –≤ Set
		}
	});

	return oldMessages;
}

 
async function saveChatStatus(profileName, userid, messages, stage) {
	if (!profileName || !userid) {
		console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
		return false;
	}
	console.log("üì§ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç:", profileName, messages);

	if (!Array.isArray(messages) || messages.length === 0) {
		console.warn(`‚ö†Ô∏è –ß–∞—Ç ${profileName} –ø—É—Å—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.`);
		return true;
	}
	

	try {
		await window.waitForSupabase();
		// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
		const { data, error: fetchError } = await window.supabaseClient
			.from("chats")
			.select("messages, stage")
			.eq("user_nick", profileName)
			.maybeSingle();

		if (fetchError) throw fetchError;

		let updatedMessages = [];

		// ‚úÖ –ï—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
		if (data && data.messages) {
			updatedMessages = [...data.messages];
		}

		// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏)
		messages.forEach(msg => {
			if (!updatedMessages.some(existing => 
				existing.user === msg.user && 
				existing.text === msg.text && 
				existing.time === msg.time)) {
					;
			}
		});
		console.log("!!!!! UPSERT")
		//console.log(messages)
		if (!Array.isArray(messages) || messages.length === 0) {
			console.warn("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –ø—É—Å—Ç—ã, –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
			return;
		}
		
		// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π JSON –≤ –±–∞–∑—É
		const { error } = await window.supabaseClient
			.from("chats")
			.upsert([{ 
				user_nick: profileName, 
				userid, 
				messages: messages, 
				stage 
			}], { onConflict: ["user_nick"] });

		if (error) throw error;

		console.log(`‚úÖ –ß–∞—Ç ${profileName} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${messages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`);
		return true;

	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ saveChatStatus():", error);
		return false;
	}
}









// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
async function deleteChat(profileName) {
	//==console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —á–∞—Ç —Å ${profileName}...`);
	await window.waitForSupabase();

	try {
		const { error } = await window.supabaseClient
			.from("chats")
			.delete()
			.eq("user_nick", profileName);

		if (error) throw error;

		//==console.log(`‚úÖ –ß–∞—Ç —Å ${profileName} —É–¥–∞–ª—ë–Ω.`);
		return true;
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ deleteChat:", error);
		return false;
	}
}




///////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////
/////////   üî• –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å instructions   ////////////
///////////////////////////////////////////////////////////////

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function getInstruction() {
	await window.waitForSupabase();

	//==console.log("üìú –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é...");

	try {
		const { data, error } = await window.supabaseClient
			.from("instructions")
			.select("content")
			.eq("name", "katya_behavior")
			.maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle()

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", error);
			return null;
		}

		if (!data || !data.content || typeof data.content !== "string") {
			console.warn("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!");
			return null;
		}

		//==console.log("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
		return data.content.trim();
	} catch (err) {
		console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", err);
		return null;
	}
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function updateInstruction(newContent) {
	await window.waitForSupabase();

	const { data, error } = await window.supabaseClient
		.from("instructions")
		.update({ content: newContent })
		.eq("name", "katya_behavior");

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", error);
		return false;
	}
	//==console.log("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
	return true;
}

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function deleteInstruction() {
	await window.waitForSupabase();

	const { error } = await window.supabaseClient
		.from("instructions")
		.delete()
		.eq("name", "katya_behavior");

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", error);
		return false;
	}
	//==console.log("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.");
	return true;
}


async function isCityInDatabase(cityName) {
	await window.waitForSupabase();

	try {
		const { count, error } = await window.supabaseClient
			.from("cities")
			.select("*", { count: "exact", head: true }) // ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
			.or(`city_ru.eq.${cityName},city_en.eq.${cityName}`);

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Supabase:", error);
			return false;
		}

		return count > 0;
	} catch (err) {
		console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ Supabase:", err);
		return false;
	}
}



function parseUrlParams(url) {
	try {
		const params = new URL(url).searchParams;
		let userid = params.get("userID");
		const password = params.get("password");

		return { userid, password };
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL:", error);
		return { userid: null, password: null };
	}
}


// üìÇ –ß–∞—Å—Ç—å 3: –†–∞–±–æ—Ç–∞ —Å Supabase (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤)

// == –†–∞–±–æ—Ç–∞ —Å Supabase == //

async function updateStatusToTrue(id, column) {
	await waitForSupabase();
	let { error } = await window.supabaseClient
		.from("socstarters")
		.update({ [column]: true })
		.eq("id", id);

	if (error) console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${column} –¥–ª—è ID ${id}:`, error.message);
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
async function checkUserBlacklist(profileName) {
	await waitForSupabase();
	try {
		let { data, error } = await window.supabaseClient
			.from("blacklist")
			.select("user_nick")
			.filter("user_nick", "eq", profileName) // –ò—Å–ø–æ–ª—å–∑—É–µ–º `filter()`
			.maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º `maybeSingle()`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫


		if (error && error.code !== "PGRST116") {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", error.message);
			return false;
		}
		//==console.log(`üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ß–° –¥–ª—è '${profileName}':`, data);

		return data !== null; 
	} catch (e) {
		console.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", e);
		return false;
	}
}






function cleanMessageText(text) {
	if (!text || typeof text !== "string") return "";

	// –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
	return text.replace(/(?:\+7|8)?[\d\s\-\(\)]{9,}/g, "").trim();
}

function isRussianText(text) {
	if (!text || typeof text !== "string") return false;
	
	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	const phoneRegex = /(?:\+7|8)?[\d\s\-\(\).]{9,}/;
	if (phoneRegex.test(text)) {
		console.log("üìû –°–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.");
		return true;
	}
	
	// –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —è–∑—ã–∫–∞
	const cleanedText = cleanMessageText(text);

	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
	if (!cleanedText) return true;

	// –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã
	const filteredText = cleanedText.replace(/[\s\d]/g, "");

	if (!filteredText.length) return false;

	// –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
	const cyrillicCount = (filteredText.match(/[–∞-—è–ê-–Ø—ë–Å]/g) || []).length;
	const percentage = (cyrillicCount / filteredText.length) * 100;

	return percentage >= 70; // –ï—Å–ª–∏ 70%+ —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–π
}




function sleep(ms) {
	return new Promise((resolve) => setTimeout(resolve, ms));
}

async function randomPause(min = 7000, max = 20000) {
	const randomTime = Math.floor(Math.random() * (max - min + 1)) + min;
	await sleep(randomTime);
}






// ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
function safeClick(element, description) {
	if (element && typeof element.click === "function") {
		//==console.log(`üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ: ${description}`);
		element.dispatchEvent(new Event('click', { bubbles: true, cancelable: true }));
		return true;
	} else {
		console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç '${description}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω.`);
		return false;
	}
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã (–¥—É–±–ª–∏–∫–∞—Ç, –Ω–æ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞)
function sleep(ms) {
	return new Promise((resolve) => setTimeout(resolve, ms));
}

// ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ iframe
// ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ iframe
function waitForElementInIframe(iframe, selector, timeout = 3000) {
	return new Promise((resolve, reject) => {
		let iframeDoc = getUpdatedIframeContext();
		
		if (!iframeDoc) {
			console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...");
			setTimeout(() => {
				iframeDoc = getUpdatedIframeContext(); // üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å iframe
				if (!iframeDoc) {
					console.error("‚ùå iframe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.");
					return reject(new Error("Iframe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."));
				}
			}, 500);
		}

		const interval = 100; 
		let elapsedTime = 0;

		const checkElement = () => {
			if (!iframeDoc) {
				console.error("‚ùå –û—à–∏–±–∫–∞: document –≤ iframe –Ω–µ –Ω–∞–π–¥–µ–Ω.");
				reject(new Error("Iframe document –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."));
				return;
			}

			const element = iframeDoc.querySelector(selector);
			if (element) {
				console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç '${selector}' –Ω–∞–π–¥–µ–Ω –≤ iframe.`);
				resolve(element);
			} else if (elapsedTime >= timeout) {
				console.error(`‚è≥ –¢–∞–π–º–∞—É—Ç: –≠–ª–µ–º–µ–Ω—Ç '${selector}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ iframe.`);
				reject(new Error(`–¢–∞–π–º–∞—É—Ç: –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${selector}`));
			} else {
				elapsedTime += interval;
				setTimeout(checkElement, interval);
			}
		};

		checkElement();
	});
}


// ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
function performRightClick(element, description) {
	if (!element) {
		//console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${description}`);
		return false;
	}

	const event = new MouseEvent("contextmenu", {
		bubbles: true,
		cancelable: true,
		view: window,
		button: 2,
	});

	element.dispatchEvent(event);
	//==console.log(`üñ±Ô∏è –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${description}`);
	return true;
}




// ‚úÖ –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ XPath
function findElementByXPath(xpath, context = document) {
	return document.evaluate(
		xpath,
		context,
		null,
		XPathResult.FIRST_ORDERED_NODE_TYPE,
		null
	).singleNodeValue;
}


// function getRandomMessage(messages) {
//     if (messages.length === 0) {
//         throw new Error("No messages left to send.");
//     }
//     return messages.splice(Math.floor(Math.random() * messages.length), 1)[0];
// }

function getUserMessage() {
	let userMessage = "";
	while (!userMessage.trim()) {
		userMessage = prompt("Enter the message to send:");
		if (userMessage === null) {
			console.warn("Message input was cancelled. Exiting script.");
			return null;
		}
	}
	return userMessage;
}

/* function getRandomGreeting() {
	const greetings = ["–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç–∏–∫!", "–•–µ–π", "–ü—Ä–∏–≤–µ—Ç!", "–ü—Ä–∏–≤–µ—Ç )))", "–ü—Ä–∏–≤–µ—Ç–∏–∫ ))))"];
	return greetings[Math.floor(Math.random() * greetings.length)];
} */



// ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ iframe
function waitForElementInIframe(iframe, selector, timeout = 3000) {
	return new Promise((resolve, reject) => {
		let iframeDoc = getIframeDocument();
		if (!iframeDoc) return console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω!");
		
		let elapsedTime = 0;

		const checkElement = () => {
			if (!iframeDoc) {
				reject(new Error("Iframe document not accessible."));
				return;
			}
			try {
				const page_error = findElementByXPath('//*[@id="content"]/div/div[text()="Something went wrong..."]', iframeDoc);
				if (page_error) {   
					// –î–æ–±–∞–≤–ª—è–µ–º –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
					addToBlacklist(profileName, "Something went wrong...");
					
					randomPause(1040, 2036);
					
					// –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
					//handleUser(iframeDoc, profileName);
					
					// –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
					shouldContinue = false;
					return;
				}
			} catch (error) {};
			
			const element = iframeDoc.querySelector(selector);
			if (element) {
				resolve(element);
			} else if (elapsedTime >= timeout) {
				console.error(`Timeout: Element not found within iframe: ${selector}`);
				reject(new Error(`Timeout: Element not found: ${selector}`));
			} else {
				elapsedTime += 100;
				setTimeout(checkElement, 100);
			}
		};

		checkElement();
	});
}

function isSimilarMessage(lastMessage, newMessage, threshold = 0.8) {
	if (!lastMessage || !newMessage) return false;

	function similarity(str1, str2) {
		const set1 = new Set(str1.toLowerCase().split(" "));
		const set2 = new Set(str2.toLowerCase().split(" "));
		const intersection = new Set([...set1].filter(x => set2.has(x)));
		return intersection.size / Math.max(set1.size, set2.size);
	}

	return similarity(lastMessage, newMessage) >= threshold;
}

function analyzeLastUserMessages(chatMessages) {
	if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
		console.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.");
		return "neutral"; 
	}

	// ‚úÖ –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const userMessages = chatMessages.filter(msg => msg.user === "user").slice(-3);

	if (userMessages.length === 0) {
		console.warn("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—Å—Ç—Ä–æ–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.");
		return "neutral";
	}

	const lastUserMessages = chatMessages
		.filter(msg => msg.user === "user" && msg.text?.trim().length > 0)
		.map(msg => msg.text.trim());

	if (lastUserMessages.length === 0) {
		console.warn("‚ö†Ô∏è analyzeLastUserMessages(): –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.");
		return "neutral";
	}

	const lastMessage = lastUserMessages.at(-1); // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if (!lastMessage) {
		console.warn("‚ö†Ô∏è analyzeLastUserMessages(): –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
		return "neutral";
	}

	if (isQuestion(lastMessage)) {
		console.log("‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å.");
		return "curiosity";
	}
	const combinedText = userMessages.map(msg => msg.text.toLowerCase()).join(" ");

	// ‚úÖ 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ WhatsApp / –¢–µ–ª–µ–≥—Ä–∞–º—É
	// ‚úÖ 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –∫ WhatsApp / –¢–µ–ª–µ–≥—Ä–∞–º—É
	if (/—Ç–µ–ª–µ·¥¶—Ä–∞–º|—Ç–µ–ª–µ–≥—Ä–∞–º|–≤–∞–π–±–µ—Ä|–ø–µ—Ä–µ–π—Ç–∏|–Ω–æ–º–µ—Ä|–≤–æ—Ç—Å|–≤[–æ–∞]—Ç?[—Å—Ü–∑]?[–∞–æ]?[–ø–±]+|–≤[–æ–∞]—Ü[–∞–æ]?[–ø–±]+|–≤–æ—Å?–∞–ø+|–≤–∞—Å?–∞–ø+|–≤–æ—Ç—Ü[–∞–æ]–ø+|–≤–∞—Ç—Ü[–∞–æ]–ø+|–≤–∞—Ç–∑[–∞–æ]–ø+/i.test(combinedText)) {
			console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è WhatsApp.");
			return "telegram_interest";
	}

	// ‚úÖ 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥
	if (/\b(–¥–∞–≤–∞–π|–Ω–µ –ø—Ä–æ—Ç–∏–≤|–ø–µ—Ä–µ–π–¥—ë–º|–º–æ–∂–Ω–æ|–¥–∞|—Ö–æ—Ä–æ—à–æ|–æ–∫)\b/i.test(combinedText)) {
		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ WhatsApp.");
		return "confirmed_telegram";
	}

	// ‚úÖ 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–∞–∑–∞–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if (/–Ω–µ —Ö–æ—á—É|–Ω–µ –±—É–¥—É|–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ|–ø—Ä–æ—Ç–∏–≤|–æ—Ç–∫–∞–∑/i.test(combinedText)) {
		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è.");
		return "refusal";
	}

	// ‚úÖ 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	if (/^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–ø—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ø—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|—Ö–∞–π|—Ö–µ–π|–π–æ—É)/i.test(lastMessage)) {
		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è.");
		return "greeting";
	}

	// ‚úÖ 5Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
	const moods = {
		"happiness": /–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ|—Å—É–ø–µ—Ä|–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ|–∫–ª–∞—Å—Å–Ω–æ|–æ–±–æ–∂–∞—é|–≤–µ—Å–µ–ª–æ|—Å—á–∞—Å—Ç–ª–∏–≤/i,
		"sadness": /–≥—Ä—É—Å—Ç–Ω–æ|–ø–µ—á–∞–ª—å–Ω–æ|–¥–µ–ø—Ä–µ—Å—Å–∏—è|—Ç—è–∂–µ–ª–æ|—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω|–Ω–µ—É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å/i,
		"anger": /–∑–ª—é—Å—å|—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω|–±–µ—Å–∏—Ç|–Ω–µ–Ω–∞–≤–∏–∂—É|—á–µ—Ä—Ç|–∫–∞–∫ –∂–µ –±–µ—Å–∏—Ç/i,
		"anxiety": /–ø–µ—Ä–µ–∂–∏–≤–∞—é|–≤–æ–ª–Ω—É—é—Å—å|—Ç—Ä–µ–≤–æ–∂–Ω–æ|–Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å|—Å—Ç—Ä–µ—Å—Å/i,
		"tiredness": /—É—Å—Ç–∞–ª|–∏–∑–º–æ—Ç–∞–Ω|–Ω–µ–≤—ã—Å–ø–∞–ª—Å—è|–≥–æ–ª–æ–≤–∞ –∫—Ä—É–≥–æ–º|—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–ª/i,
		"excitement": /–≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç|—Ö–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å|–Ω–æ–≤—ã–µ –∏–¥–µ–∏|—ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ/i,
		"sarcasm": /–∫–æ–Ω–µ—á–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ|–∫–∞–∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ|–Ω—É –¥–∞, –Ω—É –¥–∞|–∞–≥–∞, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π/i
	};

	for (let mood in moods) {
		if (moods[mood].test(combinedText)) {
			console.log(`üìå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${mood}`);
			return mood;
		}
	}

	// ‚úÖ 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ)
	const botMessages = chatMessages.filter(msg => msg.user === "bot").slice(-3);
	if (botMessages.length > 0 && userMessages.length > 0) {
		const lastBotMessage = botMessages[botMessages.length - 1].text.toLowerCase();
		if (!combinedText.includes(lastBotMessage) && lastBotMessage.length > 10) {
			console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–æ—Ç–∞.");
			return "user_ignoring_bot";
		}
	}

	// ‚úÖ 7Ô∏è‚É£ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
/*     if (/\?$/.test(lastUserMessage)) {
		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å.");
		return "question";
	}     */
	// ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å


	// ‚úÖ 8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Ç–µ–º—ã (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è)
	if (userMessages.length >= 2) {
		const lastTopic = userMessages[userMessages.length - 1].text.toLowerCase();
		const prevTopic = userMessages[userMessages.length - 2].text.toLowerCase();
		if (lastTopic.length > 10 && prevTopic.length > 10 && !lastTopic.includes(prevTopic)) {
			console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–µ–Ω–∏–ª —Ç–µ–º—É.");
			return "topic_change";
		}
	}

	console.log("üìå –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä.");
	return "neutral"; 
}


// üìÇ –ß–∞—Å—Ç—å 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

// == –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π == //

// ==== üìå Message Handling ==== //




async function handleSendMessageUserInput(message) {
		try {

			if (!message) {
				return;
			}

			let iframeDoc = null;
			let retryCount = 0;
			const maxRetries = 10;

			iframeDoc = getIframeDocument();
			if (!iframeDoc) return console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω!");


			while (!iframeDoc && retryCount < maxRetries) {
				iframeDoc = getIframeDocument(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
				retryCount++;
			}

			if (!iframeDoc) throw new Error("Failed to access iframe document after multiple retries.");

			// üî• **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è** üî•
			const existingMessageXPath = "//div[@class='chat-message-meta is-own is-text']";
			const existingMessage = document.evaluate(
				existingMessageXPath,
				iframeDoc,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			).singleNodeValue;

			
			//message = message.replace(/Telegram/g, "—Ç–µ–ª–µ·¥¶—Ä–∞–º");
			message = message.replace(/`${WHATSAPP_CONTACT}`./g, "`${WHATSAPP_CONTACT}`");
			message = message.replace(/WhatsApp/g, "–≤–æ—Çca–ø");
			const messageLines = message.replace(/@NL@/g, "\n").split("\n").filter(line => line.trim() !== ""); // Fix applied
			

			for (const line of messageLines) {
				let textArea;
				// üî• **–ù–∞–π—Ç–∏ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ textarea** üî•
				while (!textArea && retryCount < maxRetries) {
					iframeDoc = getIframeDocument();
					if (!iframeDoc) return console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω!");
					textArea = document.evaluate(
						"//textarea[@placeholder='–°–æ–æ–±—â–µ–Ω–∏–µ']",
						iframeDoc,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					).singleNodeValue;
					retryCount++;
				}
				if (!textArea) { throw new Error(`Textarea not found using XPath after ${maxRetries} retries.`);
				}

				textArea.focus();
				await randomPause(903, 1693);
				textArea.value = "";
				textArea.dispatchEvent(new Event("input", { bubbles: true }));
				await new Promise(resolve => requestAnimationFrame(() => setTimeout(resolve, 1000))); // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å DOM
				await randomPause(1303, 1693);

				// üî• **–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞** üî•
				for (const char of line) {
					textArea.value += char;
					const inputEvent = new InputEvent("input", { bubbles: true, cancelable: true, inputType: "insertText", data: char });
					textArea.dispatchEvent(inputEvent);
					//await randomPause(79, 113);
					await new Promise(resolve => setTimeout(resolve, Math.random() * 100 + 100)); // 100‚Äì300 –º—Å
				}

				// üî• **–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è** üî•
				const sendButtonXPath = "//div[contains(@class, 'text_field_button send')]";
				const sendButton = document.evaluate(
					sendButtonXPath,
					iframeDoc,
					null,
					XPathResult.FIRST_ORDERED_NODE_TYPE,
					null
				).singleNodeValue;

				if (!sendButton) throw new Error(`Send button not found using XPath: ${sendButtonXPath}`);
				//sendButton.click();
				// ‚úÖ –ù–∞–∂–∏–º–∞–µ–º Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
				const enterEvent = new KeyboardEvent("keydown", { key: "Enter", bubbles: true });
				textArea.dispatchEvent(enterEvent);
				console.log("üöÄ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
				await randomPause(2831, 10393);
			}
		} catch (error) {
			console.error("Error in handleSendMessageUserInput:", error);
		}
}

/**
 * –°–∫–ª–µ–∏–≤–∞–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
 * –µ—Å–ª–∏ –º–µ–∂–¥—É –Ω–∏–º–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ maxIntervalMs (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –º–∏–Ω—É—Ç—ã).
 */
function combineConsecutiveUserMessages(messages, maxIntervalMs = 120000) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
	messages.sort((a, b) => new Date(a.time) - new Date(b.time));

	const result = [];
	for (let msg of messages) {
		// –ï—Å–ª–∏ result –ø—É—Å—Ç –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç –¥—Ä—É–≥–æ–≥–æ —é–∑–µ—Ä–∞ / —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è —Ä–µ–ø–ª–∏–∫–∞
		if (
			!result.length ||
			result[result.length - 1].user !== msg.user ||
			new Date(msg.time) - new Date(result[result.length - 1].time) > maxIntervalMs
		) {
			// –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			result.push({ ...msg });
		} else {
			// –ò–Ω–∞—á–µ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
			// –î–æ–ø—É—Å—Ç–∏–º, —Å–∫–ª–µ–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
			result[result.length - 1].text += "\n" + msg.text;
			// –ê –≤—Ä–µ–º—è (time) —Å–¥–µ–ª–∞–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑ –Ω–∏—Ö (—á—Ç–æ–±—ã ¬´–ø–æ—Å–ª–µ–¥–Ω–µ–µ¬ª –±—ã–ª–æ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–µ)
			result[result.length - 1].time = msg.time;
		}
	}
	return result;
}



async function parseChatMessages() {
	let iframeDoc = getIframeDocument();
	if (!iframeDoc) return [];
  
	await new Promise(resolve => setTimeout(resolve, 1500));
	let chatWrappers = iframeDoc.querySelectorAll(".chat-message-wrapper");

	// ‚úÖ –ï—Å–ª–∏ –≤ iframe —á–∞—Ç–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –≤ `document`
	if (!chatWrappers.length) {
		chatWrappers = document.querySelectorAll(".chat-message-wrapper");
		if (!chatWrappers.length) {
			console.warn("‚ö†Ô∏è –ß–∞—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
			return [];
		}
	}
   


	let messages = [];
	for (let chat of chatWrappers) {
		const isBotMessage = chat.querySelector(".chat-message.is-own") !== null;
		const textElement = chat.querySelector(".chat-message-content-text span");
		const timeElement = chat.querySelector("div.chat-message-content-wrapper > div > div > div > time");

		if (!textElement || !timeElement) continue;

		const text = textElement.textContent.trim();
		let timestamp = timeElement.getAttribute("datetime") || timeElement.textContent.trim();

		// –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
		if (/^\d{1,2}:\d{2}$/.test(timestamp)) {
			const now = new Date();
			const [hours, minutes] = timestamp.split(":").map(Number);
			now.setHours(hours, minutes, 0, 0);
			timestamp = now.toISOString();
		}

		messages.push({
			user: isBotMessage ? "bot" : "user",
			text: text,
			time: timestamp
		});
	}

	//console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è).`);

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	messages = combineConsecutiveUserMessages(messages, 2 * 60_000);

	console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö: ${messages.length}`);
	return messages.reverse(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

async function clickFallback(retries = 1, waitTime = 3000) {
	const fallbackSelector =
		"#root > div > div.auth-user > div.app-content.mdc-drawer-app-content > div.browser.browser--auth-user > header > div > section.mdc-top-app-bar__section.mdc-top-app-bar__section--align-start > div:nth-child(1)";
	console.log("clickFallback");
	for (let attempt = 1; attempt <= retries; attempt++) {
		const fallbackElement = document.querySelector(fallbackSelector);
		if (!fallbackElement) {
			await randomPause(1231, 2393);
			continue;
		}
		fallbackElement.click();
		await randomPause(1931, 3093);
		if (document.querySelector("div.mail_chat_list_wrap")) {
			return;
		}
	}
}

async function clickNearMenu(retries = 1, waitTime = 3000) {
	
	
	if (document.querySelector("#root > div > div.auth-user > aside > div.mdc-drawer__content.drawer__content.scroll > nav > a:nth-child(2)").click()) {
		await randomPause(1231, 1993);
		return;
	}
}




async function scrollChatListDown() {
	//==console.log("üîΩ –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤–Ω–∏–∑...");
  
	let iframeDoc = getIframeDocument();
	if (!iframeDoc) return console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω!");

	// 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º —á–∞—Ç–æ–≤
	let chatListContainer = iframeDoc.querySelector(".mail_chat_list_wrap");
	if (!chatListContainer) {
		console.warn("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
		return false;
	}

	let lastChatCount = chatListContainer.querySelectorAll(".mail_chat_item").length; // –ß–∏—Å–ª–æ —á–∞—Ç–æ–≤ –¥–æ —Å–∫—Ä–æ–ª–ª–∞
	//==console.log(`üìä –ß–∞—Ç–æ–≤ –¥–æ —Å–∫—Ä–æ–ª–ª–∞: ${lastChatCount}`);

	for (let i = 0; i < 10; i++) { // üîÑ –î–µ–ª–∞–µ–º –¥–æ 10 —Å–∫—Ä–æ–ª–ª–æ–≤
		//==console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ #${i + 1}...`);
		
		// 2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º `scrollIntoView()` –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∞—Ç—É
		let chatItems = chatListContainer.querySelectorAll(".mail_chat_item");
		let lastChat = chatItems[chatItems.length - 1]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç

		if (lastChat) {
			lastChat.scrollIntoView({ behavior: "smooth", block: "end" });
			//==console.log("‚úÖ –°–∫—Ä–æ–ª–ª —á–µ—Ä–µ–∑ scrollIntoView() —Å—Ä–∞–±–æ—Ç–∞–ª!");
		} else {
			console.warn("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
		}

		await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 500 –º—Å

		// 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —á–∞—Ç—ã
		let currentChatCount = chatListContainer.querySelectorAll(".mail_chat_item").length;
		//==console.log(`üìä –ß–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞: ${currentChatCount}`);

		if (currentChatCount === lastChatCount) {
			console.warn("‚ö†Ô∏è –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ç—å.");
			break; // üö´ –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
		}

		lastChatCount = currentChatCount; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
	}

	//==console.log("‚úÖ –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.");
	return true;
}


// üìÇ –ß–∞—Å—Ç—å 5: –†–∞–±–æ—Ç–∞ —Å iframe

// ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è iframe-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function getUpdatedIframeContext() {
	let iframeDoc = getIframeDocument();
	if (!iframeDoc) return null;

	return { updatedIframe: document.querySelectorAll("iframe")[1], iframeDoc };
}


function getIframeDocument() {
	const iframe = document.querySelectorAll("iframe")[1]; // –ë–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–π iframe
	return iframe ? iframe.contentDocument || iframe.contentWindow.document : null;
}

async function handleUser(iframeDoc, profileName) {
	await randomPause(540, 1336);
	try {
		console.warn("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ß–°...");
		const isBlacklisted = await checkUserBlacklist(profileName);
		if (!isBlacklisted) {
			//==console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${profileName}' –Ω–µ –≤ –ß–°, –¥–∏–∞–ª–æ–≥ –Ω–µ —É–¥–∞–ª—è–µ–º.`);
			return; 
		}

		//==console.log(`üîç –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∫–æ–º '${profileName}'...`);
		const unreadMessageSelector = 
			"div.mail_chat_list_wrap > div.mail_chat_item > div.mail_chat_item__content_grid > div:nth-child(2)";
		const allUnreadMessages = iframeDoc.querySelectorAll(unreadMessageSelector);
		//==console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allUnreadMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.`);

		const filteredUnreadMessages = Array.from(allUnreadMessages).filter(item => {
			const messageContainer = item.closest(".mail_chat_item");
			const userElement = messageContainer.querySelector(
				"div.mail_chat_item__content_grid > div:nth-child(1) > div:nth-child(1) > div > div"
			);

			if (!userElement) {
				console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
				return false;
			}

			const foundprofileName = userElement.textContent.trim().toLowerCase();
			return foundprofileName === profileName.toLowerCase();
		});

		if (filteredUnreadMessages.length === 0) {
			console.warn(`‚ö†Ô∏è –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç '${profileName}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
			return;
		}

		const targetUnreadMessage = filteredUnreadMessages[0];
		performRightClick(targetUnreadMessage, `Unread message from ${profileName}`);
		await randomPause(982,1836);

		({ iframeDoc } = getUpdatedIframeContext());

		//==console.log("üìå –ö–ª–∏–∫–∞–µ–º '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥'...");
		const deleteConversationXPath = "//div[contains(@class, 'component_bottom_sheet_menu_item') and text()='–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥']";
		const deleteConversationElement = findElementByXPath(deleteConversationXPath, iframeDoc);

		if (deleteConversationElement) {
			safeClick(deleteConversationElement, "'–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥'");
			await randomPause(482, 1036);
		} else {
			console.warn("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∏–∞–ª–æ–≥ —É–∂–µ —É–¥–∞–ª—ë–Ω.");
			return;
		}

		({ iframeDoc } = getUpdatedIframeContext());

		//==console.log("üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...");
		const confirmYesXPath = "//button[contains(@class, 'mdc-button') and text()='–î–∞']";
		const confirmYesElement = findElementByXPath(confirmYesXPath, iframeDoc);

		if (confirmYesElement) {
			safeClick(confirmYesElement, "'–î–∞' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'");
			await randomPause(982,1836);
		} else {
			console.warn("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ 'Yes' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
		}

		//==console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ `handleUser()`: ", error);
	}
}



///////////////////////////////////////////////////////////////

// ‚úÖ –ñ–¥—ë–º Supabase
//await window.waitForSupabase();


// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
function getTimeOfDay() {
	const hours = new Date().getHours();

	if (hours >= 6 && hours < 12) return "—É—Ç—Ä–æ";      // 06:00 - 11:59
	if (hours >= 12 && hours < 19) return "–¥–µ–Ω—å";     // 12:00 - 17:59
	if (hours >= 19 && hours < 24) return "–≤–µ—á–µ—Ä";    // 18:00 - 23:59
	return "–Ω–æ—á—å";                                    // 00:00 - 05:59
}

function getTimeOfDayGreeting() {
	const now = new Date();
	const hours = now.getHours();

	if (hours >= 5 && hours < 12) {
		return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è";
	} else if (hours >= 12 && hours < 19) {
		return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üòä";
	} else if (hours >= 19 && hours < 24) {
		return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô";
	} else {
		return "–ü—Ä–∏–≤–µ—Ç! üëã"; // –ù–æ—á—å—é –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ "–ü—Ä–∏–≤–µ—Ç"
	}
}


// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function isUserBeingRude(chatMessages) {
	const rudeKeywords = [
		"—à–ª—é—Ö–∞", "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞", "–±–ª—è–¥—å", "–±–ª—è—Ç—å", "—Ç—Ä–∞—Ö*", "–µ–±–∞—Ç—å", "–ø–µ—Ç—É—Ö", "–ø–∏–¥–æ—Ä", "—á—É—Ä–∫–∞", "—Ö–æ—Ö–æ–ª", "–º—Ä–∞–∑—å",
		"—É–±–µ–π—Å—è", "–¥–∞—É–Ω", "—Ö—É–µ—Å–æ—Å", "–ø–∏–¥–æ—Ä–∞—Å", "–∫–æ–Ω—á–µ–Ω—ã–π", "—Å–¥–æ—Ö–Ω–∏", "–º—Ä–∞–∑–æ—Ç–∞", "—É–µ–±–∏—â–µ", "–≥–∞–Ω–¥–æ–Ω", "–≥–Ω–∏–¥–∞", 
		"–∏–¥–∏ –Ω–∞—Ö—É–π", "–µ–±–ª–∞–Ω", "–µ–±—É—á–∏–π", "–≤—ã–µ–±–∏", "—Å–æ—Å–∏", "–µ–±–∏—Å—å", "–ø–æ—à–ª–∞ –Ω–∞—Ö—É–π", "–∏–¥–∏ –≤ –∂–æ–ø—É", "–∫—Ä–∏–ø—Ç",
		
		// üö® –û–∫–∫—É–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –£–∫—Ä–∞–∏–Ω—ã (—Ä–∞–∑–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è)
		"–î–æ–Ω–µ—Ü–∫", "–î–æ–Ω–µ—Ü–∫–∞", "–î–æ–Ω–µ—Ü–∫–µ", "–î–æ–Ω–µ—Ü–∫—É",
		"–õ—É–≥–∞–Ω—Å–∫", "–õ—É–≥–∞–Ω—Å–∫–∞", "–õ—É–≥–∞–Ω—Å–∫–µ", "–õ—É–≥–∞–Ω—Å–∫—É",
		"–ú–∞–∫–µ–µ–≤–∫–∞", "–ú–∞–∫–µ–µ–≤–∫–µ", "–ú–∞–∫–µ–µ–≤–∫–∏", "–ú–∞–∫–µ–µ–≤–∫—É",
		"–ì–æ—Ä–ª–æ–≤–∫–∞", "–ì–æ—Ä–ª–æ–≤–∫–µ", "–ì–æ—Ä–ª–æ–≤–∫–∏", "–ì–æ—Ä–ª–æ–≤–∫—É",
		"–ê–ª—á–µ–≤—Å–∫", "–ê–ª—á–µ–≤—Å–∫–∞", "–ê–ª—á–µ–≤—Å–∫–µ", "–ê–ª—á–µ–≤—Å–∫—É",
		"–°—Ç–∞—Ö–∞–Ω–æ–≤", "–°—Ç–∞—Ö–∞–Ω–æ–≤–∞", "–°—Ç–∞—Ö–∞–Ω–æ–≤–µ", "–°—Ç–∞—Ö–∞–Ω–æ–≤—É",
		"–ú–∞—Ä–∏—É–ø–æ–ª—å", "–ú–∞—Ä–∏—É–ø–æ–ª—è", "–ú–∞—Ä–∏—É–ø–æ–ª–µ", "–ú–∞—Ä–∏—É–ø–æ–ª—é",
		"–ë–µ—Ä–¥—è–Ω—Å–∫", "–ë–µ—Ä–¥—è–Ω—Å–∫–∞", "–ë–µ—Ä–¥—è–Ω—Å–∫–µ", "–ë–µ—Ä–¥—è–Ω—Å–∫—É",
		"–ú–µ–ª–∏—Ç–æ–ø–æ–ª—å", "–ú–µ–ª–∏—Ç–æ–ø–æ–ª—è", "–ú–µ–ª–∏—Ç–æ–ø–æ–ª–µ", "–ú–µ–ª–∏—Ç–æ–ø–æ–ª—é",
		"–ö–µ—Ä—á—å", "–ö–µ—Ä—á–∏", "–ö–µ—Ä—á—å—é", "–ö–µ—Ä—á–∏",
		"–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—è", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª–µ", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—é",
		"–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª–µ", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—é",
		"–•–µ—Ä—Å–æ–Ω", "–•–µ—Ä—Å–æ–Ω–∞", "–•–µ—Ä—Å–æ–Ω–µ", "–•–µ—Ä—Å–æ–Ω—É",
		"–≠–Ω–µ—Ä–≥–æ–¥–∞—Ä", "–≠–Ω–µ—Ä–≥–æ–¥–∞—Ä–∞", "–≠–Ω–µ—Ä–≥–æ–¥–∞—Ä–µ", "–≠–Ω–µ—Ä–≥–æ–¥–∞—Ä—É",

		// üö® –û–∫–∫—É–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –£–∫—Ä–∞–∏–Ω—ã (—Ä–∞–∑–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è)
		"–î–æ–Ω–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", "–î–æ–Ω–µ—Ü–∫—É—é –æ–±–ª–∞—Å—Ç—å",
		"–õ—É–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–õ—É–≥–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", "–õ—É–≥–∞–Ω—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å",
		"–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä–æ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", "–ó–∞–ø–æ—Ä–æ–∂—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å",
		"–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", "–•–µ—Ä—Å–æ–Ω—Å–∫—É—é –æ–±–ª–∞—Å—Ç—å",
		"–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º", "–ö—Ä—ã–º—É", "–ö—Ä—ã–º", "–ö—Ä—ã–º–∞", "–ö—Ä—ã–º–µ"
	];

	return chatMessages.some(msg =>
		msg.user === "user" && 
		rudeKeywords.some(word => msg.text.toLowerCase().includes(word))
	);
}

// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const MAX_STAGE = 3;
const Telegram_OFFER_KEYWORDS = ["Telegram", "–≤–∞—Ç—Å–∞–ø", "–≤–∞–π–±–µ—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ–º–µ—Ä", "–ø–µ—Ä–µ–π—Ç–∏", "–æ–±—Å—É–¥–∏–º —Ç–∞–º"];
const HOURS_24 = 24 * 60 * 60 * 1000;
const DAYS_3 = 3 * HOURS_24;
const OPENAI_PROXY_URL = "https://your-worker-name.workers.dev"; // Cloudflare Worker

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ Telegram
function hasTelegramOffer(messages) {
	return messages.some(msg =>
		msg.user === "bot" && Telegram_OFFER_KEYWORDS.some(keyword => msg.text.toLowerCase().includes(keyword))
	);
}


// –§—É–Ω–∫—Ü–∏—è shouldBotRespond ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
function shouldBotRespond(chatHistory, stage) {
  if (!Array.isArray(chatHistory) || chatHistory.length === 0) {
	console.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞. –û—Ç–≤–µ—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.");
	return true; // –ï—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const sortedHistory = [...chatHistory].sort((a, b) => new Date(a.time) - new Date(b.time));
  const lastMessage = sortedHistory[sortedHistory.length - 1];

  if (!lastMessage || !lastMessage.time) {
	console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
	return false;
  }

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º ‚Äì –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
  if (lastMessage.user === "bot") {
	console.log("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –æ—Ç –±–æ—Ç–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.");
	return false;
  }

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  return canRespond(lastMessage.time, stage, lastMessage);
}

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function canRespond(lastMessageTime, stage, lastUserMessage) {
	if (!lastMessageTime) {
		console.warn("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
		return ;
	}

	const now = new Date();
	const lastTimeDate = new Date(lastMessageTime); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É/–¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç Date

	if (isNaN(lastTimeDate.getTime())) {
		console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!", lastMessageTime);
		return false;
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
	const hours = lastTimeDate.getHours();
	const minutes = lastTimeDate.getMinutes();

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Date —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π, –Ω–æ –Ω—É–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
	const lastTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes);
	//==console.log("‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ:", lastTime);

	const timeDiff = now - lastTime;

	if (stage === 1 || stage === 2) {
		return !lastUserMessage || timeDiff <= DAYS_3; // –î–æ 3 –¥–Ω–µ–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	}
	return timeDiff <= HOURS_24; // 24 —á–∞—Å–∞ –Ω–∞ –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–¥–∏–π
}


// ### üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
function getRandomGreeting() {
	const messages = [
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]![üòä|üòâ]@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@][–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@]–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç [—Ç–≤–æ–π|] –¥–µ–Ω—å? [üòä|üòâ]@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		
	];
/* function getRandomGreeting() {
	const messages = [
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]![üòä|üòâ][ |@NL@]–ö–∞–∫ [—Ç–≤–æ–π|] –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç?@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@]–ö–∞–∫ [—Ç–≤–æ–µ|] –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ[ —Å–µ–≥–æ–¥–Ω—è|]? [üòä|üòâ]@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [üòä|üòâ][ |@NL@]–ö–∞–∫ [—Ç–≤–æ–∏|] –¥–µ–ª–∞ [—Å–µ–≥–æ–¥–Ω—è|]?@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@]–ß–µ–º [–∑–∞–Ω—è—Ç|–∑–∞–Ω–∏–º–∞–µ—à—å—Å—è] [—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å|]?@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@]–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç [—Ç–≤–æ–π|] –¥–µ–Ω—å? [üòä|üòâ]@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [ |@NL@]–ö–∞–∫ —Ç—ã? [üòä|üòâ]@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]",
		"[–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ü—Ä–∏–≤–µ—Ç—É–ª–∏]! [üòä|üòâ][ |@NL@]–¢—ã [—É–∂–µ|] –¥–∞–≤–Ω–æ —Ç—É—Ç?@NL@[–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?|–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!|–ù–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?|–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?]"
	]; */

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	let message = messages[Math.floor(Math.random() * messages.length)];

	// –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã –º–∞—Å–æ–∫
	function replaceMask(text) {
		return text.replace(/\[(.*?)\]/g, (match, options) => {
			let variants = options.split('|').filter(v => v.trim() !== ""); // –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ
			return variants[Math.floor(Math.random() * variants.length)];
		});
	}

	return replaceMask(message);
}


function similarity(str1, str2) {
	const set1 = new Set(str1.toLowerCase().split(" "));
	const set2 = new Set(str2.toLowerCase().split(" "));
	const intersection = new Set([...set1].filter(x => set2.has(x)));
	return intersection.size / Math.max(set1.size, set2.size);
}

function isSimilarMessage(lastMessage, newMessage, threshold = 0.8) {
	return similarity(lastMessage, newMessage) >= threshold;
}

async function adaptivePause(message) {
	let delay = Math.random() * 1000 + message.length * 40; // 40ms –Ω–∞ —Å–∏–º–≤–æ–ª
	delay = Math.min(delay, 5000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –≤ 5 —Å–µ–∫
	await new Promise(resolve => setTimeout(resolve, delay));
}
function hasBotOfferedTelegram(chatMessages) {
	return chatMessages.some(msg =>
		msg.user === "bot" && /—Ç–µ–ª–µ·¥¶—Ä–∞–º|—Ç–µ–ª–µ–≥—Ä–∞–º|—Ç–µ–ª–µ–≥—Ä–∞–ºe|–≤–∞–π–±–µ—Ä|–≤–æ—Çca–ø|–≤–∞—Ç—Å–∞–ø|–ø–µ—Ä–µ–π—Ç–∏|–Ω–æ–º–µ—Ä|–≤–æ—Ü–∞–ø|–∫–æ–Ω—Ç–∞–∫—Ç/i.test(msg.text.toLowerCase())
	);
}



/** üîπ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞** */
function checkLastBotMessageGreeting(lastBotMessage) {
	if (!lastBotMessage || typeof lastBotMessage.text !== "string") {
		return false;
	}
	const greetings = ["–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç–∏–∫", "–•–µ–π", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏", "–ü—Ä–∏–≤–µ—Ç—É–ª–∏"];
	return greetings.some(greeting => lastBotMessage.text.includes(greeting));
}



async function generateMessage(profileName, userAge, prompt, instruction = "", stage, chatMessages, userid) {
	const timeOfDay = getTimeOfDay();
	let userMood = analyzeLastUserMessages(chatMessages);
	let moodPrompt = getMoodPrompt(userMood);

	if (moodPrompt === null) return null;
	if (userMood === "refusal") return null; // üîπ –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç

	if (!await shouldBotReply(chatMessages, profileName, userid, stage)) {
		console.log("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.");
		return ; // üîπ –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º return null
	}

	chatMessages = chatMessages.reverse();
	const lastBotMessage = getLastBotMessage(chatMessages);
	const lastUserMessage = getLastUserMessage(chatMessages);//
	console.log("üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", lastUserMessage.text);
	const UserMessagesAfterLastBot = getUserMessagesAfterLastBot(chatMessages);
	console.log("üì© –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", UserMessagesAfterLastBot);
/* 	console.log(`\n\n\n`);
	console.log(UserMessagesAfterLastBot);
	console.log(`\n`);
	console.log(UserMessagesAfterLastBot.text);
	console.log(`\n\n\n`); */
	const selectedRandomGreetingMessage = getRandomGreeting();
	const botMessages = chatMessages.filter(msg => msg.user === "bot");
	const lastBotMessageWasGreeting = checkLastBotMessageGreeting(lastBotMessage);
	const femaleToneInstruction = getFemaleToneInstruction(selectedRandomGreetingMessage);

	// ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å `prompt_`
	let prompt_ = generateIntermediatePrompt(botMessages, selectedRandomGreetingMessage, lastUserMessage, UserMessagesAfterLastBot);
	let fullPrompt = buildFullPrompt(chatMessages, selectedRandomGreetingMessage, lastUserMessage, UserMessagesAfterLastBot, timeOfDay, moodPrompt, lastBotMessageWasGreeting, prompt_);

	//console.log("üìå \n\n\n\–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:", fullPrompt);
	//console.log("\n\n\n\n");

	// ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º cacheKey
/* 	const cacheKey = JSON.stringify({ profileName, userAge, stage, chatMessages });
	console.log("üìå Cache Key:", cacheKey); // üìå –õ–æ–≥–∏—Ä—É–µ–º cacheKey


	// ‚úÖ –ß—ë—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
	let cachedResponse = checkCache(cacheKey, chatMessages); */
	//if (cachedResponse !== undefined) return cachedResponse;
	console.log("üìúgenerateMessage\n –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fullPrompt:", fullPrompt);
	try {
		let bot_resp = await getOpenAIResponse(fullPrompt);

		if (!bot_resp || typeof bot_resp !== "string" || bot_resp.trim() === "") {
			console.error("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:", bot_resp);
			return null;
		}

		// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à, –µ—Å–ª–∏ –≤—Å—ë –æ–∫


		return bot_resp;
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ OpenAI:", error);
		return null;
	}
}


/** üîπ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è** */

async function isPhoneNumberExistsForUser(profileName) {
	await window.waitForSupabase();
	try {
		console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è ${profileName}...`);
		const { count, error } = await window.supabaseClient
			.from("phone_numbers")
			.select("*", { count: "exact", head: true })
			.eq("user_nick", profileName);

		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ:", error);
			return false;
		}

		console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${count}`);
		return count > 0;
	} catch (err) {
		console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞:", err);
		return false;
	}
}


// –§—É–Ω–∫—Ü–∏—è shouldBotReply ‚Äì –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
async function shouldBotReply(chatMessages, profileName, userid, stage) {
  if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
	console.warn("‚ö†Ô∏è –ß–∞—Ç –ø—É—Å—Ç ‚Äî –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –æ—Ç–≤–µ—á–∞—Ç—å.");
	return false;
  }

  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
  if (await isPhoneNumberExistsForUser(profileName) || hasBotSentPhoneNumber(chatMessages)) {
	console.log("üö´ –ë–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.");
	return false;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const lastMessage = chatMessages.reduce((latest, msg) =>
	(!latest || new Date(msg.time) > new Date(latest.time)) ? msg : latest,
	chatMessages[0]
  );

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º, –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
  if (lastMessage?.user === "bot") {
	console.log("üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç.");
	return false;
  }

  // –î–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ß–° –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª
  if (containsBlacklistedWords(chatMessages)) {
	console.warn(`üö® –í —á–∞—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –ë–ª–æ–∫–∏—Ä—É–µ–º ${profileName}.`);
	await addToBlacklist(profileName, "–°–ª–æ–≤–∞ –∏–∑ –ë–ª–µ–∫–ª–∏—Å—Ç–∞");
	return false;
  }

  if (await isUserBlacklisted(profileName)) {
	console.warn(`‚õî ${profileName} –≤ –ß–°. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.`);
	return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const lastUserMessage = chatMessages.filter(msg => msg.user === "user").pop();
  if (!lastUserMessage || !lastUserMessage.time) return false;

  const now = new Date();
  const lastTime = new Date(lastUserMessage.time);
  const timeDiff = now - lastTime;

  if (stage === 1 || stage === 2) {
	return timeDiff <= 3 * 24 * 60 * 60 * 1000; // –¥–æ 3 –¥–Ω–µ–π
  }
  return timeDiff <= 24 * 60 * 60 * 1000; // –∏–Ω–∞—á–µ 24 —á–∞—Å–∞
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –±–æ—Ç —É–∂–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function hasBotSentPhoneNumber(chatMessages) {
	return chatMessages.some(msg =>
		msg.user === "bot" && /\+7\d{10}/.test(msg.text)
	);
}




/** üîπ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞** */
function containsBlacklistedWords(chatMessages) {
	const blacklistedWords = getBlacklistedWords();
	return chatMessages.some(msg => 
		blacklistedWords.some(word => msg.text.toLowerCase().includes(word))
	);
}

/** üîπ **–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è moodPrompt** */
function getMoodPrompt(userMood) {
	const moodResponses = {
		"confirmed_telegram": null,
		"telegram_interest": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è WhatsApp. –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç `${WHATSAPP_CONTACT}`",
		"refusal": null, // –ë—ã–ª–æ "NaN"
		"greeting": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥—Ä—É–∂–µ—Å–∫–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
		"default": "–ü—Ä–æ–¥–æ–ª–∂–∞–π –±–µ—Å–µ–¥—É, –Ω–æ –±—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π."
	};
	return moodResponses[userMood] || moodResponses["default"];

}



/** üîπ **–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞** */
function getLastBotMessage(chatMessages) {
	const botMessages = chatMessages.filter(msg => msg.user === "bot");
	return botMessages.length > 0 ? botMessages[botMessages.length - 1] : { text: "" };
}




/** üîπ **–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (`prompt_`)** */
function generateIntermediatePrompt(botMessages, selectedMessage, lastUserMessage, lastBotMessage) {
	const greetings = ["–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç–∏–∫", "–•–µ–π", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏", "–ü—Ä–∏–≤–µ—Ç—É–ª–∏"];

	if (botMessages.length === 0) {
		return `
		${selectedMessage} - —É—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ "${lastUserMessage.text}".  
		–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–∏—à–µ—Ç "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", —Å–ø—Ä–∞—à–∏–≤–∞–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ—á–µ—Ä–∞.  
		–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`.trim();
	} 
	
	if (botMessages.some(msg => greetings.some(greeting => msg.text.includes(greeting)))) {
		return `
		–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${DONOR_NAME}: ${lastBotMessage.text}  
		===  
		–ù–µ –ø–∏—à–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`.trim();
	}

	return `
	–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${DONOR_NAME}: ${lastBotMessage.text}  
	===  
	–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?`.trim();
}
function isRepeatingUserMessage(userMessage, botResponse) {
	if (!userMessage || !botResponse) return false;

	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	const userText = userMessage.toLowerCase().trim();
	const botText = botResponse.toLowerCase().trim();

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	const userWords = userText.split(/\s+/);
	const botWords = botText.split(/\s+/);
	const commonWords = botWords.filter(word => userWords.includes(word));

	// –ï—Å–ª–∏ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ 60% —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–≤—Ç–æ—Ä–æ–º
	return commonWords.length / botWords.length > 0.4;
}

// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
function getRandomFrom(arr) {
	return arr[Math.floor(Math.random() * arr.length)];
}

function checkBotMessageGreeting(messages) {
	const greetingWords = ["–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç–∏–∫", "–•–µ–π", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏", "–ü—Ä–∏–≤–µ—Ç—É–ª–∏", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"];

	return messages
		.filter(msg => msg.user === "bot") // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
		.some(msg => greetingWords.some(word => msg.text.includes(word))); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
}

function buildFullPrompt(chatMessages, selectedMessage, lastUserMessage, lastBotMessage, timeOfDay, moodPrompt, lastBotMessageWasGreeting, prompt_) {
	const femaleToneInstruction = getFemaleToneInstruction();
	const chatMessagesLength = chatMessages.length;
	const BotMessageWasGreeting = checkBotMessageGreeting(chatMessages);
	const currentGreeting = getTimeOfDayGreeting(); // üïí –ë–µ—Ä—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫

	// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
	let timeOfDayQuestion = "";
	switch (timeOfDay) {
		case "—É—Ç—Ä–æ":
			timeOfDayQuestion = ""; // –£—Ç—Ä–æ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
			break;
		case "–¥–µ–Ω—å":
			timeOfDayQuestion = getRandomFrom([
				"–ö–∞–∫ –Ω–∞—á–∞–ª—Å—è —Ç–≤–æ–π –¥–µ–Ω—å?",
				"–ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç?",
				"–ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?"
			]);
			break;
		case "–≤–µ—á–µ—Ä":
			timeOfDayQuestion = getRandomFrom([
				"–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?",
				"–•–æ—Ä–æ—à–∏–π –±—ã–ª –¥–µ–Ω—å?"
			]);
			break;
	}
	// ‚úÖ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–º—ã
	// ‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ —Ñ—Ä–∞–∑—ã
	const forbiddenPhrases = `
	‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏ –Ω–µ –æ–±—Å—É–∂–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã –∏ —Ñ—Ä–∞–∑—ã:
	
	- –†–∞–±–æ—Ç–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è
	- –û—Ç–∫—É–¥–∞ —Ç—ã, –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≥–æ—Ä–æ–¥
	- –ò–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è
	- "–î–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å"
	- "–ü—Ä–æ–ø–∞–ª", "–ò—Å—á–µ–∑"
	- "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å", "–ü–æ—á–µ–º—É –º–æ–ª—á–∏—à—å"

	–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–± —ç—Ç–∏—Ö —Ç–µ–º–∞—Ö, –æ—Ç–≤–µ—á–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp..
	`;
	console.log(`\n\nüì° [chatMessagesLength]: ${chatMessagesLength}`);
	
	
		/*     –ù–µ –ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.  
		${femaleToneInstruction}  
		üìå **–°–µ–π—á–∞—Å: ${timeOfDay}.**  
		üìå **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:**  
		${JSON.stringify(chatMessages)}  
		üìå **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**  
		"${lastUserMessage.text}"  
		üìå **${moodPrompt}**  
		üìå **–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?**
		üìå **–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp.**
		${forbiddenPhrases} */
	
	if (chatMessagesLength >= 2) {
		return `
		üìå **–ù–µ –ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.**
		üìå **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp.**
		üìå **–ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ**
		${forbiddenPhrases}
		`.trim();
	} else {
		return `
		üìå **–°–µ–π—á–∞—Å: ${timeOfDay}.**  
		${BotMessageWasGreeting ? "**–ù–µ –ø–∏—à–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.**" : "–ù–∞—á–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å: ${currentGreeting}"}
		${femaleToneInstruction}
		üìå **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:**  
		${JSON.stringify(chatMessages)}  
		üìå **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**  
		"${lastUserMessage.text}"  
		üìå **${moodPrompt}**  
		${timeOfDayQuestion ? "üìå **${timeOfDayQuestion}**" : ""}  
		üìå **–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?**
		${forbiddenPhrases}
		`.trim();
	}
}


 
/** üîπ **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–µ—à–∞** */
function checkCache(cacheKey, chatMessages) {
	if (window.openAICache.has(cacheKey)) {
		let cachedResponse = window.openAICache.get(cacheKey);
		console.log(`üì° [CACHE] –û—Ç–≤–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω: ${cachedResponse}`);

		const lastBotMessage = chatMessages.filter(msg => msg.user === "bot").pop();
		if (lastBotMessage && lastBotMessage.text.trim() === cachedResponse.trim()) {
			console.warn("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –¥—É–±–ª–∏–∫–∞—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.");
			return "NaN";
		}
		return cachedResponse;
	}
	console.warn("‚ö†Ô∏è –ö–µ—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
	return null;
}






/** üîπ **–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤** */
function getBlacklistedWords() {
	return [
		"–¥—Ä–æ—á—É", "–¥—Ä–æ—á–∏—Ç—å", "–¥—Ä–æ—á–∏—à—å", "–¥—Ä–æ—á–∏–º", "–¥—Ä–æ—á–∞—Ç", "–¥—Ä–æ—á–∏–ª–∞", "–¥—Ä–æ—á–∏–ª", "–¥—Ä–æ—á–∏–ª–æ", "–≥–æ–ª—ã–π", "–≥–æ–ª–∞—è", "–≥–æ–ª—ã–µ", "–≥–æ–ª—ã–º", "–≥–æ–ª—É—é", "–≥–æ–ª–æ–≥–æ", "–≥–æ–ª—ã—Ö", "—Å–µ–∫—Å", "–ø–æ—Ä–Ω–æ", "—ç—Ä–æ—Ç–∏–∫–∞", "–∏–Ω—Ç–∏–º", "—Ä–∞–∑–¥–µ—Ç—å—Å—è", "—Ä–∞–∑–¥–µ—Ç–∞—è", "—Ä–∞–∑–¥–µ—Ç—ã–π", "—Ä–∞–∑–¥–µ—Ç—ã–µ", "–º–∏–Ω–µ—Ç", "–∫—É–Ω–∏", "–∞–Ω–∞–ª—å–Ω—ã–π", "–∞–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Å", "–æ—Ä–≥–∞–∑–º", "–º–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è", "—Ñ–µ—Ç–∏—à", "–ø–µ—Ç—Ç–∏–Ω–≥", "–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ", "—Ñ–∏—Å—Ç–∏–Ω–≥", "–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ", "—Ä–∞–∑–¥–µ–≤–∞—Ç—å—Å—è", "–≥–æ–ª—ã—à–æ–º", "—Å–æ—Å–∞—Ç—å", "–ª–∏–∑–∞—Ç—å", "—á–ª–µ–Ω", "–≤–∞–≥–∏–Ω–∞", "–ø–µ–Ω–∏—Å", "–≥—Ä—É–¥—å", "—Å–æ—Å–∫–∏", "–ø–æ–ø–∫–∞", "—è–≥–æ–¥–∏—Ü—ã", "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏—è", "—ç—Å–∫–æ—Ä—Ç", "–≥–µ–π", "–ª–µ—Å–±–∏—è–Ω–∫–∞", "—Ç—Ä–∞—Ö", "—Ç—Ä–∞—Ö–∞—é", "—Ç—Ä–∞—Ö–∞–µ—à—å", "—Ç—Ä–∞—Ö–∞–µ—Ç", "—Ç—Ä–∞—Ö–∞–ª—Å—è", "—Ç—Ä–∞—Ö–∞–ª–∞—Å—å", "—Ç—Ä–∞—Ö–Ω—É", "—Ç—Ä–∞—Ö–Ω–µ–º", "–µ–±–∞—Ç—å", "–µ–±—É", "–µ–±–µ—à—å", "–µ–±–µ—Ç", "–µ–±–∞–ª–∞—Å—å", "–µ–±–∞–ª—Å—è", "–µ–±–∞–Ω—ã–π", "–µ–±–∞–Ω–∞—è", "–µ–±–∞–Ω–æ–µ", "—Å—É–∫–∞", "–±–ª—è–¥—å", "–ø–∏–∑–¥–∞", "—Ö—É–µ—Å–æ—Å", "–º–∞–Ω–¥–∞", "–º–∞–Ω–¥–∞–≤–æ—à–∫–∞", "—Å–ø–µ—Ä–º–∞", "–∫–æ–Ω—á–∏—Ç—å", "–∫–æ–Ω—á–∞", "–¥—Ä–æ—á–µ—Ä", "–∏–∑–≤—Ä–∞—â–µ–Ω–µ—Ü", "–∏–∑–≤—Ä–∞—â–µ–Ω–∫–∞", "–∏–∑–≤—Ä–∞—â–µ–Ω–∏—è", "–ø–æ—Ä–Ω—É—Ö–∞", "–∂–æ–ø–∞", "–∞–Ω–∞–ª", "–≥—Ä—É–ø–ø–æ–≤—É—Ö–∞", "–æ—Ä–≥–∏—è", "—Å–µ–∫—Å-–∏–≥—Ä—É—à–∫–∞", "—Ñ–∞–ª–æ–∏–º–∏—Ç–∞—Ç–æ—Ä", "–≤–∏–∞–≥—Ä–∞", "–∫—Ä–∏–ø—Ç–æ", "–∫—Ä–∏–ø—Ç–∞", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
	];
}

/** üîπ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ö–∞—Ç–∏** */
function getFemaleToneInstruction(selectedMessage) {
	return `
	–¢—ã ‚Äì ${DONOR_INFO}, 
	–¢—ã —Å–µ–π—á–∞—Å –≤ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ. –ù–æ –æ–± —ç—Ç–æ–º –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
	–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –≤–µ—Å—Ç–∏ –∂–∏–≤–æ–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –º—É–∂—á–∏–Ω–∞–º–∏ –Ω–∞ —Å–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp. 

	üìå **–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**  
	‚úÖ **–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º—É–∂—Å–∫–æ–π —Ä–æ–¥ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –Ω–æ –æ —Å–µ–±–µ –≥–æ–≤–æ—Ä–∏ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ.**  
	‚úÖ **–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ: 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ –±–æ–ª–µ–µ 5-7 —Å–ª–æ–≤.**  
	‚úÖ **–ù–µ –ø–∏—à–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —É–∂–µ –∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å.**  
	‚úÖ **–ù–µ –ø–∏—à–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ø–æ–¥–æ–±–Ω–æ–µ.**  
	‚úÖ **–ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ –º–µ—Å—Ç–µ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞, —Ä–∞–±–æ—Ç–µ –∏ —Ä–æ–¥–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.**  
	‚úÖ **–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π "–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?", –µ—Å–ª–∏ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏.**  
	‚úÖ **–ù–µ –¥—É–±–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã ‚Äì –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏.**  
	‚úÖ **–ò–∑–±–µ–≥–∞–π —Ñ—Ä–∞–∑ "–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è" –∏ —Ç. –¥.**  
	‚úÖ **–ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª—ã üòäüòúüòâ, –Ω–æ –Ω–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äì –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.**  

	üìå **–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—â–µ–Ω–∏—è:**  
	1Ô∏è‚É£ **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:** –í—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ: ${selectedMessage}.  
	2Ô∏è‚É£ **–ö–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.**  
	3Ô∏è‚É£ **–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ–±–º–µ–Ω–∞ —Ä–µ–ø–ª–∏–∫–∞–º–∏ ‚Äì –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**  
	4Ô∏è‚É£ **–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω, –Ω–æ –Ω–µ –¥–∞—ë—Ç –Ω–æ–º–µ—Ä ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π:**  
	   - ‚úÖ ${WHATSAPP_CONTACT}  
	5Ô∏è‚É£ **–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–æ–º–µ—Ä ‚Äì —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ:**  
	   - ‚úÖ –í–æ—Ç –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üí¨ @NL@ ${WHATSAPP_CONTACT} 
	6Ô∏è‚É£ **–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è ‚Äì –Ω–µ –Ω–∞—Å—Ç–∞–∏–≤–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä:**  
	   - ‚úÖ "–ü–æ–Ω—è–ª–∞, —Ç–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä"  
	7Ô∏è‚É£ **–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–¢–µ–±–µ –Ω–∞–±—Ä–∞—Ç—å?" ‚Äì –æ—Ç–≤–µ—Ç–∏—Ç—å:**  
	   - ‚úÖ "–õ—É—á—à–µ –Ω–∞–ø–∏—à–∏, —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é, –Ω–µ—É–¥–æ–±–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å üòä"  
	`.trim();
}





function isPhoneAlreadySentByBot(chatMessages) {
	return chatMessages.some(msg => msg.user === "bot" && /(?:\+7|8)?[\d\s()-]{10,}/.test(msg.text));
}
function isPhoneNumberSent(chatMessages, phoneNumber = "`${WHATSAPP_CONTACT}`") {
	return chatMessages.some(msg => msg.user === "bot" && msg.text.includes(phoneNumber));
}


async function parseAndSavePhoneNumber(chatMessages, profileName, userid) {
	await window.waitForSupabase();

	for (const msg of chatMessages) {
		if (msg.user !== "user") continue; // –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

		// ‚úÖ –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (10+ —Ü–∏—Ñ—Ä, +7, 8, —Å–∫–æ–±–∫–∏, –ø—Ä–æ–±–µ–ª—ã, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
		const phoneMatches = msg.text.match(/(?:\+7|8)?[\d\s()-]{10,}/g);

		if (!phoneMatches) continue;

		for (let phoneNumber of phoneMatches) {
			// üî• –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
			phoneNumber = phoneNumber.replace(/[^\d]/g, "");

			// üî• –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
			phoneNumber = normalizePhoneNumber(phoneNumber);

			// ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
			if (phoneNumber === WHATSAPP_CONTACT.replace(/[^\d]/g, "")) {
				console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (${WHATSAPP_CONTACT}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
				return;
			}

			console.log(`üìû –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –æ—Ç ${profileName}: ${phoneNumber}`);

			// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ
			const { count, error } = await window.supabaseClient
				.from("phone_numbers")
				.select("*", { count: "exact", head: true })
				.eq("phone_number", phoneNumber)
				.eq("user_nick", profileName)
				.eq("userid", userid);

			if (error) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ –≤ –ë–î:", error);
				continue;
			}

			if (count > 0) {
				console.warn(`‚ö†Ô∏è –ù–æ–º–µ—Ä ${phoneNumber} –æ—Ç ${profileName} —É–∂–µ –µ—Å—Ç—å –≤ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
				return;
			}

			// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
			const { insertError } = await window.supabaseClient
				.from("phone_numbers")
				.insert([{ userid, user_nick: profileName, phone_number: phoneNumber, time_added: new Date().toISOString() }]);

			if (insertError) {
				console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞:", insertError);
			} else {
				console.log(`‚úÖ –ù–æ–º–µ—Ä ${phoneNumber} –æ—Ç ${profileName} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î.`);
			}
		}
	}
}



// ‚úÖ –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞
function normalizePhoneNumber(phoneNumber) {
	if (phoneNumber.startsWith("8")) {
		phoneNumber = "7" + phoneNumber.slice(1); // –ú–µ–Ω—è–µ–º 8 ‚Üí 7
	} else if (!phoneNumber.startsWith("7")) {
		phoneNumber = "7" + phoneNumber; // –î–æ–±–∞–≤–ª—è–µ–º 7, –µ—Å–ª–∏ –Ω–µ—Ç 7 –∏–ª–∏ 8
	}
	return phoneNumber;
}




// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function findPhoneNumbers(jsonArray) {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	//const phoneRegex = /(?:\+7|8)?\d{10}/g;
	const phoneRegex = /(kate_vo_de|(?:\+7|8)?[\d{10}.-]+)/g;
	
	return jsonArray.filter(msg => phoneRegex.test(msg.text));
}


function findElement(selector, context = document) {
	return context.querySelector(selector);
}

async function clickMessageButton() {
	let iframeDoc = getIframeDocument();
	if (!iframeDoc) throw new Error("‚ùå iframe –Ω–µ –Ω–∞–π–¥–µ–Ω");

	// ‚úÖ XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ Message
	const messageButtonXPath = "//div[@class='button__wrapper' and contains(normalize-space(), '–ù–∞–ø–∏—Å–∞—Ç—å')]";

	try {
		// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
		const messageButton = document.evaluate(
			messageButtonXPath,
			iframeDoc,
			null,
			XPathResult.FIRST_ORDERED_NODE_TYPE,
			null
		).singleNodeValue;

		if (!messageButton) throw new Error(`‚ùå Message button –Ω–µ –Ω–∞–π–¥–µ–Ω!`);

		messageButton.click();
		//==console.log("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Message' –Ω–∞–∂–∞—Ç–∞!");

		await randomPause(3582, 7836);
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ clickMessageButton:", error);
	}
}

function getLastUserMessage(chatMessages) {
	if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
		console.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞!");
		return null;
	}

	// ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
	const userMessages = chatMessages.filter(msg => msg.user === "user" && msg.text.trim() !== "");

	if (userMessages.length === 0) {
		console.warn("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.");
		return null;
	}

	// ‚úÖ –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ (–∞ –Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
	const lastUserMessage = userMessages[userMessages.length - 1];

	
	return lastUserMessage;
}

function getUserMessagesAfterLastBot(chatMessages) {
	if (!Array.isArray(chatMessages) || chatMessages.length === 0) {
		console.warn("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞!");
		return [];
	}
	let lastBotIndex = -1;

	// ‚úÖ –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
	for (let i = chatMessages.length - 1; i >= 0; i--) {
		if (chatMessages[i].user === "bot") {
			lastBotIndex = i; break; }
	}
	// ‚úÖ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if (lastBotIndex === -1) {
		return chatMessages.filter(msg => msg.user === "user" && msg.text.trim() !== ""); 
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
	return chatMessages.slice(lastBotIndex + 1).filter(msg => msg.user === "user" && msg.text.trim() !== "");
}



// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function isUserAskingForPhone(chatMessages) {
	return chatMessages.some(msg => 
		msg.user === "user" && 
		/–Ω–æ–º–µ—Ä|—Ü–∏—Ñ—Ä—ã|–∫–æ–Ω—Ç–∞–∫—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω|–∫–∏–Ω—å|—Å–∫–∏–Ω—å|–¥–∞–π|–Ω–∞–ø–∏—à–∏|–≤–æ—Ç—Ü–∞–ø|–≤–∞—Ç—Å–∞–ø/i.test(msg.text.toLowerCase())
	);
}

// ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
async function lockUserProcessing(profileName) {
	await window.waitForSupabase();
	//==console.log(`üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ ${profileName}...`);

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	const [{ data, error }, currentTime] = await Promise.all([
		window.supabaseClient
			.from("chats")
			.select("processing_flag, processing_time")
			.eq("user_nick", profileName)
			.maybeSingle(),
		new Date().toISOString()
	]);

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error);
		return false;
	}

	// –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
	if (data?.processing_flag) {
		console.warn(`‚ö†Ô∏è ${profileName} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ ${data.processing_time}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
		return false;
	}

	// –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
	const { error: updateError } = await window.supabaseClient
		.from("chats")
		.update({ processing_flag: true, processing_time: currentTime })
		.eq("user_nick", profileName);

	if (updateError) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", updateError);
		return false;
	}

	console.log(`‚úÖ ${profileName} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
	return true;
}

// ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
async function unlockUserProcessing(profileName) {
	await window.waitForSupabase();

	const { error } = await window.supabaseClient
		.from("chats")
		.update({ processing_flag: false, processing_time: null })
		.eq("user_nick", profileName);

	if (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:", error);
	} else {
		console.log(`üîì ${profileName} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
	}
}


/**
 * –ñ–¥—ë—Ç, –ø–æ–∫–∞ –≤ —á–∞—Ç–µ –ø–æ—è–≤—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è ('.chat-message-wrapper'),
 * –∏–ª–∏ –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç —Ç–∞–π–º–∞—É—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.
 */
async function waitForChatMessages(iframeDoc, maxWaitMs = 5000) {
	let startTime = Date.now();
	while (Date.now() - startTime < maxWaitMs) {
		// –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–∞
		const chatWrappers = iframeDoc.querySelectorAll(".chat-message-wrapper");
		if (chatWrappers.length > 0) {
			console.log("‚úÖ –ù–∞–π–¥–µ–Ω—ã chat-message-wrapper:", chatWrappers.length);
			return true;
		}
		// –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥–æ–∂–¥—ë–º 500 –º—Å –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–Ω–æ–≤–∞
		await new Promise(res => setTimeout(res, 500));
	}
	console.warn("‚ö†Ô∏è waitForChatMessages: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞", maxWaitMs, "–º—Å");
	return false;
}


///////////////////////////////////////////////////////////////
//  –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è processUserMessage —Å –≤—ã–∑–æ–≤–∞–º–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
///////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏. –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª–æ–≥–∏–∫—É –∏–∑ –≤–∞—à–∏—Ö chats.stage
function getstage(chatMessages) {
  // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å "stage" –≤ –ë–î, –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –æ—Ç—Ç—É–¥–∞
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –µ—Å–ª–∏ –≤ —á–∞—Ç–µ 0..3 —Å–æ–æ–±—â–µ–Ω–∏–π, stage=1, –∏–Ω–∞—á–µ stage=2
  const count = chatMessages.length;
  if (count <= 3) return 1;
  if (count <= 6) return 2;
  if (count <= 9) return 3;
  return 4; // –∏ —Ç.–¥.
}


const chatCache = new Map();

async function getCachedChatStatus(profileName) {
	if (chatCache.has(profileName)) {
		const chatStatus = chatCache.get(profileName) || await getChatStatus(profileName);
		chatCache.set(profileName, chatStatus);
		return chatStatus;
	}

	const chatStatus = await getChatStatus(profileName);
	chatCache.set(profileName, chatStatus);
	return chatStatus;
}

async function processChatMessage(profileName, userid) {
	console.log(`\nüì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ${profileName}... userid=${userid}`);

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –∏ –ø–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
	const [chatStatus, rawChatMessages] = await Promise.all([
		getCachedChatStatus(profileName), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
		parseChatMessages()
	]);

	let { messages = [], stage } = chatStatus;

	// –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	let chatMessages = rawChatMessages.filter(msg => msg.text.trim().length > 0);

	if (chatMessages.length > 0) {
		messages = mergeUniqueMessages(messages, chatMessages);

		// ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –±–∞–∑–µ **–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è**
		await saveChatStatus(profileName, userid, messages, stage);

	}

	// ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
	const [lastUserMessage, lastBotMessage] = messages.length > 0
		? await Promise.all([getLastUserMessage(messages.reverse()), getLastBotMessage(messages)])
		: [null, null];

	console.log("üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", lastUserMessage?.text || "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
	console.log("üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:", lastBotMessage?.text || "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");

	return { lastUserMessage, lastBotMessage, chatMessages, stage};
}



async function processUserMessage(profileName, userCity = "", userAge = "", userid = "") {
	//console.log(`\nüì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${profileName}...`);
		// 2. –°—á–∏—Ç—ã–≤–∞–µ–º myUrl

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ß–°
	if (await isUserBlacklisted(profileName)) {
		console.warn(`‚õî ${profileName} –≤ –ß–°. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.`);
		return;
	}

	// ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	//console.log(`üìå –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑	–æ–≤–∞—Ç–µ–ª—è: ${profileName}`);
	let { lastUserMessage, lastBotMessage, chatMessages, stage} = await processChatMessage(profileName, userid);
	//userid = userID;
	if (!chatMessages.length) {
	  return await sendGreeting(profileName, userid);
	}
	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
	let userInfo = await getUserInfo(profileName);

	if (!userInfo) {
		console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–ª—è–µ–º...`);
		await addUserIfNotExists(profileName, "", "", userCity, userAge);
		userInfo = await getUserInfo(profileName); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
	}

	if (!userInfo) {
		console.error(`‚ùå –û—à–∏–±–∫–∞: userID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è ${profileName}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
		return;
	}


	console.log(`üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º processMessage: profileName=${profileName}, userid=${userid}`);


	// ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
	chatMessages = await parseChatMessages();
	if (!chatMessages.length) {
	  return await sendGreeting(profileName, userid);
	}

	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ ‚Äì –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º:
	if (!shouldBotRespond(chatMessages, stage)) {
	  return;
	}
	// üî• **–§–∏–∫—Å –æ—à–∏–±–∫–∏: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º `updatedMessages` –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!**
	let updatedMessages = [...chatMessages];


	
	// ‚úÖ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	if (!chatMessages.length) {
		return await sendGreeting(profileName, userid);
			   
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –ª–∏ —É–∂–µ –Ω–æ–º–µ—Ä
	if (isPhoneAlreadySentByBot(chatMessages)) {
		console.log("‚úÖ –ë–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω.");
		return;
	}

	// ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≥—Ä—É–±–æ—Å—Ç—å
	console.log("üìå –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
	let{ phoneFound, isRude } = await checkUserBehavior(chatMessages, profileName, userid);
	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–ò –í–´–•–û–î–ò–ú)
	phoneFound = await parsePhoneFirstTime(chatMessages, profileName, userid);
	
	if (phoneFound) {
		console.log(`üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.`);
		return;  // ‚ùóÔ∏è –í–ê–ñ–ù–û: –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	}
	// ‚úÖ –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –≥—Ä—É–±–æ—Å—Ç—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
	if (await handlePhoneOrRudeExit(phoneFound, isRude, profileName)) {
		return;
	}

	// ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const userMood = analyzeLastUserMessages(chatMessages);

	// ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WhatsApp (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è)
	if (await handleConfirmedWhatsApp(userMood, chatMessages, profileName, userid)) {
		return;
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä
	if (await handleUserAskingForPhone(chatMessages, profileName, userid)) {
		return;
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏ –ª–∏ WhatsApp —Ä–∞–Ω–µ–µ
	if (skipRepeatedWhatsAppOffer(chatMessages)) {
		return;
	}

	// ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏—é –æ–±—â–µ–Ω–∏—è
	stage = typeof stage === "number" ? stage : getstage(chatMessages);

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞)
	if (checkLastMessageTime(chatMessages, stage).stopDialog) {
		return;
	}
/* 	// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:
	if (!await shouldBotReply(chatMessages, profileName, userid, stage)) {
	  return;
	} */
	// ‚úÖ –í—ã–∑–æ–≤ `processMessage` –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
	const botResponse = await processMessage(profileName, chatMessages, userAge, stage, userid);

	// ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	await handleSendMessageUserInput(botResponse);

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
	updatedMessages.push({ user: "bot", text: botResponse, time: new Date().toISOString() });

	// üî• **–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º!**
	if (!updatedMessages || updatedMessages.length === 0) {
		console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π!");
		return;
	}

	console.log(`‚úÖ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: profileName=${profileName}, userid=${userid}`);
	console.table(updatedMessages);

	await saveChatStatus(profileName, userid, updatedMessages, stage, userid);

	console.log(`‚úÖ processUserMessage('${profileName}') –∑–∞–≤–µ—Ä—à—ë–Ω.\n`);
}


function checkForPhoneNumber(chatMessages) {
	const phoneRegex = /(?:\+?\d{1,3}[-.\s]?)?(?:\(\d{1,4}\)[-.\s]?)?\d{3,4}[-.\s]?\d{2,4}[-.\s]?\d{2,4}/g;

	return chatMessages.some(msg => 
		msg.user === "user" && phoneRegex.test(msg.text)
	);
}


async function processMessage(profileName, chatMessages, userAge = "", stage = 1, userid = "") {
	console.log(`ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è ${profileName}...`);

	if (!profileName || !userid) {
		console.warn("‚ùå –û—à–∏–±–∫–∞: profileName –∏–ª–∏ userid –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
		return false;
	}

	console.log(`‚úÖ –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: profileName=${profileName}, userid=${userid}, —Å–æ–æ–±—â–µ–Ω–∏–π: ${chatMessages.length}`);

	if (!chatMessages || chatMessages.length === 0) {
		console.warn(`‚ö†Ô∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName}, —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.`);
		//const greeting = "–ü—Ä–∏–≤–µ—Ç! üòä –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?";
		const greeting = getRandomGreeting(); //"–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?";

		chatMessages.push({ user: "bot", text: greeting, time: new Date().toISOString() });

		await saveChatStatus(profileName, userid, chatMessages, 1);
		return greeting;
	}

	const lastUserMessage = getLastUserMessage(chatMessages.reverse());
	if (!lastUserMessage) {
		console.warn("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.");
		return "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?";
	}

	console.log(`üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${lastUserMessage.text}"`);

	let fullPrompt = `–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n`;
	chatMessages.forEach(msg => {
		fullPrompt += `${msg.user === "user" ? "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "ü§ñ –ë–æ—Ç"}: ${msg.text}\n`;
	});

	fullPrompt += `üìå **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** "${lastUserMessage.text}"\n`;
	fullPrompt += `üìå **–û—Ç–≤–µ—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.**\n`;
	fullPrompt += `üìå **–î–æ–±–∞–≤—å —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è.**\n`;
	fullPrompt += `üìå **–ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —á—Ç–æ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å! –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–∏—à–∏, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—à—å!.**\n`;

	

	let botResponse;
	let attempt = 0;
	const MAX_RETRIES = 3;

	do {
		if (attempt > 0) console.warn(`üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})...`);

		botResponse = await generateUniqueResponse(fullPrompt, profileName, userAge, stage, chatMessages, null, userid);
		attempt++;

		if (!botResponse || botResponse.trim() === "") {
			console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!");
			botResponse = null;
		}

		if (attempt >= MAX_RETRIES) {
			console.warn("‚ö†Ô∏è –ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback.");
			botResponse = "";//"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ—ë –≤—Ä–µ–º—è? üòä";
			break;
		}
	} while (!botResponse);

	console.log(`ü§ñ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${botResponse}`);

	chatMessages.push({ user: "bot", text: botResponse, time: new Date().toISOString() });

	await saveChatStatus(profileName, userid, chatMessages, stage);

	return botResponse;
}



function isQuestion(message) {
	message = message.toLowerCase().trim();

	// ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å "?" ‚Äî —ç—Ç–æ —Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å
	if (/[?Ôºü]/.test(message)) return true;

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ñ—Ä–∞–∑–∞ —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
	const questionWords = [
		"–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ","—á–µ–º", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫—Ç–æ", "—Å–∫–æ–ª—å–∫–æ", "—á–µ–π", "–∫–∞–∫–æ–π", "–º–æ–∂–Ω–æ", "—Ç—ã",
		"–µ—Å—Ç—å –ª–∏", "–±—ã–≤–∞–µ—Ç –ª–∏", "–º–æ–≥—É –ª–∏", "–±—É–¥–µ—à—å –ª–∏", "—Ö–æ—á–µ—à—å –ª–∏", "–∑–Ω–∞–µ—à—å –ª–∏"
	];

	return questionWords.some(word => message.startsWith(word) || message.endsWith(word));
}




function adjustResponseBasedOnMood(response, userMood) {
	const moodResponses = {
		"happiness": response + " –≠—Ç–æ –∫—Ä—É—Ç–æ! üéâ –ß—Ç–æ –µ—â—ë –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è?",
		"sadness": response + " –ù–∞–¥–µ—é—Å—å, –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! –ú–æ–∂–µ—Ç, —á—Ç–æ-—Ç–æ —Ç–µ–±—è –ø–æ—Ä–∞–¥—É–µ—Ç?",
		"anger": response + " –û–π, –ø–æ—Ö–æ–∂–µ, —Ç—ã —á–µ–º-—Ç–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω(–∞)... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º?",
		"anxiety": response + " –•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç? –ò–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è.",
		"tiredness": response + " –û—Ö, —Ç—è–∂–µ–ª—ã–π –¥–µ–Ω—å? –ú–æ–∂–µ—Ç, –Ω–∞–π–¥–µ—Ç—Å—è –º–∏–Ω—É—Ç–∫–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞?",
		"excitement": response + " –í–∞—É! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —ç—Ç–æ –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!",
		"sarcasm": "–•–º, —á—É–≤—Å—Ç–≤—É—é –Ω–æ—Ç–∫—É —Å–∞—Ä–∫–∞–∑–º–∞. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –¥—É–º–∞–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ? üòè",
		"neutral": response
	};

	return moodResponses[userMood] || response;
}


// üîπ –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let chatHistory = {};

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã –±–µ—Å–µ–¥—ã
function detectTopicChange(chatMessages) {
	if (!chatMessages || chatMessages.length < 3) return false;

	const lastUserMessage = chatMessages.at(-1).text.toLowerCase();
	const prevUserMessage = chatMessages.at(-2).text.toLowerCase();
	const prevPrevUserMessage = chatMessages.at(-3).text.toLowerCase();

	// –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ ‚Äî —Ç–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
	if (lastUserMessage.length > 15 && 
		prevUserMessage.length > 15 && 
		!lastUserMessage.includes(prevUserMessage) && 
		!prevUserMessage.includes(prevPrevUserMessage)) {
		
		console.log("üîÑ –¢–µ–º–∞ –±–µ—Å–µ–¥—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!");
		return true;
	}

	return false;
}


/**
 * 1. –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –∏–∑ –ë–î, –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ iframe –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
 */
async function initProcessing(profileName) {
	//console.log(`üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ${profileName}...`);

	const { messages, stage: stage } = await getChatStatus(profileName);
	let prompt = "";
	let nextStage = stage;

	// –ó–∞–±–∏—Ä–∞–µ–º —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ iframe
	let chatMessages = await parseChatMessages() || [];

	return { messages, stage, chatMessages, prompt, nextStage };
}


/**
 * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –Ω–æ–º–µ—Ä —É–∂–µ —Ä–∞–Ω—å—à–µ (–µ—Å–ª–∏ –¥–∞ ‚Äî —É—Ö–æ–¥–∏–º).
 */
function checkIfPhoneSentBefore(chatMessages) {
	if (isPhoneNumberSent(chatMessages)) { // ‚Üê –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
		console.log("‚úÖ –ù–æ–º–µ—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
		return true;
	}
	return false;
}


/**
 * 3. –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
async function parsePhoneFirstTime(chatMessages, profileName, userid) {
	const phoneFound = await parseAndSavePhoneNumber(chatMessages, profileName, userid); 
	return phoneFound;
}


/**
 * 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥—Ä—É–±–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (isUserBeingRude) –∏ –∏—â–µ–º –Ω–æ–º–µ—Ä (parseAndSavePhoneNumber).
 */
async function checkPhoneAndRudeParallel(chatMessages, profileName, userid) {
	const [isRude, phoneFound] = await Promise.all([
		isUserBeingRude(chatMessages),            // ‚Üê —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ
		parseAndSavePhoneNumber(chatMessages, profileName, userid)
	]);
	return { isRude, phoneFound };
}


/**
 * 5. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–º–µ—Ä - –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É–±–∏—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ß–° –∏ –≤—ã—Ö–æ–¥–∏–º.
 */
async function handlePhoneOrRudeExit(phoneFound, isRude, profileName) {
	if (phoneFound) {
		console.log(`üö™ –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å ${profileName}, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä —É–∂–µ –Ω–∞–π–¥–µ–Ω.`);
		return true; // c–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
	}

	if (isRude) {
		console.warn(`üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} –≤–µ–¥–µ—Ç —Å–µ–±—è –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ! –î–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°.`);
		await addToBlacklist(profileName, "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è/–Ω–µ–∞–¥–µ–∫–≤–∞—Ç"); // ‚Üê –≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è

		let iframeDoc = getIframeDocument();                     // ‚Üê —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ
		if (!iframeDoc) {
			console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω!");
			return true; 
		}
		 // ‚Üê —É–∂–µ –µ—Å—Ç—å
		//await handleUser(iframeDoc, profileName);                   // ‚Üê —É–∂–µ –µ—Å—Ç—å
		await clickNearMenu();                                   // ‚Üê —É–∂–µ –µ—Å—Ç—å

		return true; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	}

	return false; // –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
}


/**
 * 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (analyzeLastUserMessages) –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (saveChatStatus).
 */
async function updateHistoryAndAnalyzeMood(profileName, userid, oldMessages, stage, chatMessages) {
	const userMood = analyzeLastUserMessages(chatMessages); // ‚Üê –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è

	try {
		const updatedMessages = mergeUniqueMessages(oldMessages, chatMessages); // ‚Üê —É–∂–µ –µ—Å—Ç—å
		await saveChatStatus(profileName, userid, updatedMessages, stage);     // ‚Üê —É–∂–µ –µ—Å—Ç—å
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:", error);
	}

	return userMood;
}


/**
 * 7. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ WhatsApp (userMood === 'confirmed_telegram'),
 *    –Ω–æ –±–æ—Ç –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∫–æ–Ω—Ç–∞–∫—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –≤—ã—Ö–æ–¥–∏–º.
 */
async function handleConfirmedWhatsApp(userMood, chatMessages, profileName, userid, stage) {
	if (userMood === "confirmed_telegram" && !isPhoneAlreadySentByBot(chatMessages)) {
		console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ WhatsApp, –Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä...");
		let timestamp = new Date().toISOString();
		chatMessages.push({ user: "bot", text: WHATSAPP_CONTACT, time: timestamp });

		await Promise.all([
			saveChatStatus(profileName, userid, chatMessages, stage),
			handleSendMessageUserInput(WHATSAPP_CONTACT) // ‚Üê –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		]);

		return true; // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
	}
	return false;
}


/**
 * 8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª –Ω–æ–º–µ—Ä (isUserAskingForPhone), –∞ –º—ã –µ–≥–æ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
 */
async function handleUserAskingForPhone(chatMessages, profileName, userid, stage) {
	const userAskedForPhone = isUserAskingForPhone(chatMessages);  // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä
	const lastBotMessage = getLastBotMessage(chatMessages);  // üì© –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –±–æ—Ç —É–∂–µ –Ω–æ–º–µ—Ä
	const phoneAlreadySent = isPhoneNumberSent(chatMessages);

	if (userAskedForPhone && !phoneAlreadySent) {
		console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç...");

		let timestamp = new Date().toISOString();
		const botResponse = WHATSAPP_CONTACT;

		chatMessages.push({ user: "bot", text: botResponse, time: timestamp });

		await Promise.all([
			saveChatStatus(profileName, userid, chatMessages, stage),
			handleSendMessageUserInput(botResponse)
		]);

		return true;
	} 
	
	// ‚úÖ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º –∏–Ω–∞—á–µ
	if (phoneAlreadySent && userAskedForPhone) {
		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ...");

		let timestamp = new Date().toISOString();
		const botResponse = "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ WhatsApp, –±—É–¥—É –∂–¥–∞—Ç—å! üòâ";

		chatMessages.push({ user: "bot", text: botResponse, time: timestamp });

		await Promise.all([
			saveChatStatus(profileName, userid, chatMessages, stage),
			handleSendMessageUserInput(botResponse)
		]);

		return true;
	}

	return false;
}



/**
 * 9. –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å–∏—Ç ‚Äî –¥–∞—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ WhatsApp".
 */
async function handleAlreadySentButAskedAgain(chatMessages, profileName, userid, stage) {
	const userAskedForPhone = isUserAskingForPhone(chatMessages);
	const phoneAlreadySent = isPhoneNumberSent(chatMessages);

	if (phoneAlreadySent && userAskedForPhone) {
		// –í –≤–∞—à–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞: if (parseAndSavePhoneNumber === 1) { return; }
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–µ –º–µ–Ω—è—è:
		if (parseAndSavePhoneNumber === 1) {
			return true;
		}

		console.log("üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –Ω–æ–º–µ—Ä, —É—Ç–æ—á–Ω—è–µ–º...");
		const botResponse = "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ WhatsApp, –±—É–¥—É –∂–¥–∞—Ç—å! üòâ";
		chatMessages.push({ user: "bot", text: botResponse, time: new Date().toISOString() });

		await Promise.all([
			saveChatStatus(profileName, userid, chatMessages, stage),
			handleSendMessageUserInput(botResponse)
		]);
		return true;
	}
	return false;
}


/**
 * 10. –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª WhatsApp (hasBotOfferedTelegram) ‚Äî –≤—ã—Ö–æ–¥–∏–º (return "NaN").
 */
function skipRepeatedWhatsAppOffer(chatMessages) {
	if (hasBotOfferedTelegram(chatMessages)) { // ‚Üê —É–∂–µ –µ—Å—Ç—å
		console.warn("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª WhatsApp, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.");
		return true;
	}
	return false;
}


/**
 * 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–Ω–∞–ø–∏—Å–∞–ª", –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (canRespond).
 */
function checkLastMessageTime(chatMessages, oldMessages, stage) {
	const lastMessage = chatMessages.length > 0 ? chatMessages[chatMessages.length - 1] : null;
	const userMessages = chatMessages.filter(msg => msg.user === "user");

	const lastUserMessage = userMessages.length > 0
		? userMessages.reduce((latest, msg) => msg.time > latest.time ? msg : latest, userMessages[0])
		: { text: "(–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)" };



	//console.log("üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", lastUserMessage.text);

	const lastMessageTime = lastMessage ? lastMessage.time : null;
	console.log("üìå lastMessageTime:", lastMessageTime);

	if (!lastMessageTime) {
		console.error("‚ùå –û—à–∏–±–∫–∞: lastMessageTime –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!", lastMessageTime);
		return { stopDialog: true };
	}

	const now = new Date();
	const lastTimeDate = new Date(lastMessageTime);

	if (isNaN(lastTimeDate.getTime())) {
		console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!", lastMessageTime);
		return { stopDialog: true };
	}

	const hours = lastTimeDate.getHours();
	const minutes = lastTimeDate.getMinutes();
	const lastTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes);
	console.log("‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ:", lastTime);

	if (!canRespond(lastTime, stage, lastUserMessage)) { // ‚Üê —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–¥–µ
		console.warn("‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
		return { stopDialog: true };
	}

	return { stopDialog: false };
}


/**
 * 12. –û–ø—Ä–µ–¥–µ–ª—è–µ–º prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ —á–∞—Ç–∞.
 *    (–°—Ç–∞–¥–∏–∏ 1..4 –∏ –≤—ã—à–µ).
 */
function defineStagePrompt(stage, messages) {
	let prompt = "";

	if (stage === 1 && messages.length > 0) {
		console.log("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ");
	} else if (stage === 1) {
		prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
	} else if (stage === 2) {
		prompt = "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –∑–∞–¥–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.";
	} else if (stage === 3) {
		prompt = "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp?";
	} else if (stage >= 4) {
		prompt = "–ñ–¥–∞—Ç—å –ø–æ–∫–∞ —Å–±—Ä–æ—Å–∏—Ç —Å–≤–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç –º–æ–π. –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: `${WHATSAPP_CONTACT}`";
	}

	return prompt;
}


/**
 * 13. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–µ –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å, —É–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –∏–∑ prompt (—Ä–µ–≥.–≤—ã—Ä–∞–∂–µ–Ω–∏–µ).
 */
function removeUnnecessaryQuestion(prompt, stage, chatMessages) {
	const botMessages = chatMessages.filter(msg => msg.user === "bot");
	const lastBotMessage = botMessages.sort((a, b) => new Date(a.time) - new Date(b.time)).pop();

	const userMessages = chatMessages.filter(msg => msg.user === "user");
	const lastUserMessage = userMessages.length > 0
		? userMessages.reduce((latest, msg) => msg.time > latest.time ? msg : latest, userMessages[0])
		: { text: "" };

	const lastUserText = (lastUserMessage?.text || "").toLowerCase();
	const userAskedQuestion = /[?Ôºü]$/.test(lastUserText) ||
		["—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–ø–æ—á–µ–º—É", "–∫–æ–≥–¥–∞", "–∑–∞—á–µ–º"].some(word => lastUserText.includes(word));

	const shouldBotAskQuestion = userAskedQuestion || (stage === 1 && !botMessages.length);

	if (!shouldBotAskQuestion) {
		prompt = prompt.replace(/(–ö–∞–∫|–ß—Ç–æ|–ì–¥–µ|–ü–æ—á–µ–º—É|–ö–æ–≥–¥–∞|–ó–∞—á–µ–º|–ß–µ–º).*?\?/, "").trim();
		console.log("‚ö†Ô∏è –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ø—Ä–æ–º–ø—Ç–∞.");
	}

	return { prompt, lastBotMessage };
}


/**
 * 14. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫).
 */
async function generateUniqueResponse(prompt, profileName, userAge, stage, chatMessages, lastBotMessage, userid) {
	let botResponse = "";
	const MAX_RETRIES = 3;
	let attempt = 0;

	if (!prompt || prompt.trim().length === 0) {
		console.error("‚ùå –û—à–∏–±–∫–∞: `prompt` –ø—É—Å—Ç–æ–π. OpenAI –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.");
		return ;
	}

	do {
		if (attempt > 0) {
			console.warn(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...`);
		}

		try {
			botResponse = await generateMessage(profileName, userAge, prompt, "", stage, chatMessages, userid);
			console.log("!!!!!!!!!!!!!", botResponse);
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≤ `generateMessage()`:", error);
			return;
		}

		attempt++;

		if (!botResponse || botResponse === "NaN") {
			console.warn("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
			return;
		}

		// ‚úÖ –í—Å—Ç–∞–≤–ª—è–µ–º `@NL@` —Å–ª—É—á–∞–π–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–º–∞–π–ª–∞
		botResponse = insertNewlineBeforeSecondSentence(botResponse);

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç
		if (lastBotMessage && isSimilarMessage(lastBotMessage.text, botResponse)) {
			console.warn("üö® –ë–æ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.");
			botResponse = "";
			continue;
		}

		if (attempt >= MAX_RETRIES) {
			console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback.");
			botResponse = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?";
		}

	} while (!botResponse);

	// ‚úÖ –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –∑–∞–º–µ–Ω—è–µ–º "WhatsApp" ‚Üí "–≤–æ—Çca–ø"
	botResponse = botResponse.replace(/WhatsApp/g, "–≤–æ—Çca–ø");

	return botResponse;
}

async function clearMimicMemory() {
	console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤ Mimic Browser...");

	// 1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∫—ç—à–∞
	localStorage.clear();
	sessionStorage.clear();
	caches.keys().then(names => names.forEach(name => caches.delete(name)));

	// 2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
	navigator.serviceWorker.getRegistrations().then(regs => regs.forEach(reg => reg.unregister()));

	// 3Ô∏è‚É£ –û–±–Ω—É–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
	window.userChatsCache = null;
	window.largeObject = null;

	// 4Ô∏è‚É£ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ GC
	if (window.gc) {
		console.log("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º GC...");
		window.gc();
	}

	// 5Ô∏è‚É£ –í—ã–≤–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
	console.log("üì° –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏:", performance.memory);
}





function insertNewlineRandomly(response) {
	// ‚úÖ 50% —à–∞–Ω—Å –≤—Å—Ç–∞–≤–∏—Ç—å `@NL@`
	if (Math.random() < 0.5) {
		return response;
	}

	// ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Å–º–∞–π–ª–∏–∫
	const match = response.match(/^(–ü—Ä–∏–≤–µ—Ç—É–ª–∏|–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫–∏|–ó–¥–æ—Ä–æ–≤–æ|–•–∞–π|–•–µ–π|–ô–æ—É|–î–æ–±—Ä—ã–π –¥–µ–Ω—å|–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ)[.!?]*[üòäüòâüòúü§îüòÅüëç‚ú®‚ù§Ô∏èüòÑüéâ]*\s*/);

	if (match) {
		const matchedText = match[0]; // –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–∏–≤–µ—Ç—É–ª–∏! üòä "
		const restOfResponse = response.slice(matchedText.length); // –û—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç

		// ‚úÖ –í—Å—Ç–∞–≤–ª—è–µ–º `@NL@` –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–º–∞–π–ª–∞
		return matchedText.trim() + " @NL@ " + restOfResponse;
	}

	return response;
}


function insertNewlineBeforeSecondSentence(response) {
	// ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
	const sentenceRegex = /([^.!?]+[.!?])/g;
	const parts = response.match(sentenceRegex);

	if (!parts || parts.length < 2) {
		return response; // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω–µ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
	}

	// ‚úÖ –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è `@NL@`
	const insertIndexes = new Set();
	while (insertIndexes.size < Math.min(2, parts.length - 1)) {
		insertIndexes.add(Math.floor(Math.random() * (parts.length - 1)));
	}

	// ‚úÖ –í—Å—Ç–∞–≤–ª—è–µ–º `@NL@` –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
	let result = "";
	for (let i = 0; i < parts.length; i++) {
		result += parts[i];
		if (insertIndexes.has(i)) {
			result += " @NL@";
		}
	}

	return result.trim();
}



/**
 * 15. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–µ–ª–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø–∞—É–∑—É.
 *     –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é (nextStage).
 */
async function sendAndPause(botResponse, chatMessages, profileName, userid, stage, nextStage) {
	let timestamp = new Date().toISOString();
	chatMessages.push({ user: "bot", text: botResponse, time: timestamp });

	await Promise.all([
		saveChatStatus(profileName, userid, chatMessages, nextStage),
		handleSendMessageUserInput(botResponse)
	]);

	// –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	const userMessages = chatMessages.filter(msg => msg.user === "user");
	const lastUserMessage = userMessages.length > 0
		? userMessages.reduce((latest, msg) => msg.time > latest.time ? msg : latest, userMessages[0])
		: null;

	const botMessages = chatMessages.filter(msg => msg.user === "bot");
	const lastBotMessage = botMessages.length > 1 ? botMessages[botMessages.length - 2] : null; 

	console.log("üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", lastUserMessage?.text);
	console.log("üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:", lastBotMessage?.text);
	console.log("üìå –ó–∞–ø—Ä–æ—Å –∫ OpenAI:", prompt);  // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ prompt
	console.log("üìå OpenAI –æ—Ç–≤–µ—Ç:", botResponse);

	await adaptivePause(botResponse); // ‚Üê —É–∂–µ –µ—Å—Ç—å

	// –õ–æ–≥–∏–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏
	if (stage === 2 && hasTelegramOffer(chatMessages)) {
		nextStage = 3;
	} else if (stage < MAX_STAGE - 1) {
		nextStage++;
	}

	return nextStage;
}


// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUserIfNotExists(profileName, userName = "", registrationDate = "", userCity = "", userAge = "") {
	await window.waitForSupabase();

	let userInfo = await getUserInfo(profileName);

	if (!userInfo) {
		console.warn(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–ª—è–µ–º...`);
		await addUser(profileName, userName, registrationDate, userCity, userAge);
		userInfo = await getUserInfo(profileName); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
	} else {
		console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î: ${profileName}`);
	}

	return userInfo;
}



// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ blacklist –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
async function checkBlacklistAndDate(profileName, registrationDate) {
	await window.waitForSupabase();

	//==console.log(`üîç [checkBlacklist] –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist –¥–ª—è ${profileName}...`);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ blacklist
	const blacklisted = await isUserBlacklisted(profileName);
	if (blacklisted) {
		console.warn(`‚õî [checkBlacklist] ${profileName} —É–∂–µ –≤ blacklist!`);
		return true; // –ö–æ–¥ –≤—ã–π–¥–µ—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	const regDate = new Date(registrationDate);
	const currentDate = new Date();
	const registeredDays = Math.floor((currentDate - regDate) / (1000 * 60 * 60 * 24));

	//==console.log(`üìÖ [checkBlacklist] ${profileName} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${registeredDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ (–ü–æ—Ä–æ–≥: ${BLACKLIST_DAYS} –¥–Ω–µ–π)`);

	if (registeredDays > BLACKLIST_DAYS) {
		console.warn(`üö® [checkBlacklist] ${profileName} –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ blacklist (—Å—Ç–∞—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)`);

		const added = await addToBlacklist(profileName, `–°—Ç–∞—Ä–∞—è —Ä–µ–≥–∞: ${registeredDays}`);
		if (!added) {
			console.error("‚ùå [checkBlacklist] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ blacklist!");
			return true; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		}

		//==console.log(`‚úÖ [checkBlacklist] ${profileName} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist.`);
		return true;
	}

	//==console.log(`‚úÖ [checkBlacklist] ${profileName} –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É blacklist.`);
	return false;
}


async function shouldProcessUser(profileName, currentuserid) {
	await window.waitForSupabase();

	try {
		// 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ Supabase
		const { data, error } = await window.supabaseClient
			.from("chats")
			.select("userid")
			.eq("user_nick", profileName)
			.maybeSingle();

		// 2Ô∏è‚É£ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
		if (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–∞:", error);
			return false;
		}

		// 3Ô∏è‚É£ –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ (–Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º userid)
		if (!data) {
			console.log(`‚úÖ –ß–∞—Ç —Å ${profileName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –†–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ.`);
			return true;
		}

		// 4Ô∏è‚É£ –ï—Å–ª–∏ userid —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ
		if (data.userid === currentuserid) {
			console.log(`‚úÖ userid —Å–æ–≤–ø–∞–¥–∞–µ—Ç (${data.userid}). –†–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ.`);
			return true;
		}

		// 5Ô∏è‚É£ –ï—Å–ª–∏ userid –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		console.warn(`üö® userid –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –í –±–∞–∑–µ: ${data.userid}, –¢–µ–∫—É—â–∏–π: ${currentuserid}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
		return false;

	} catch (err) {
		console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ `shouldProcessUser()`:", err);
		return false;
	}
}

function findElementsByText_() {
	return elements;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ò–Ω—Ñ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {Promise<{ userCity: string, userName: string, userAge: number | null, registrationDate: Date | null }>} –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 */
async function extractUserData() {
	await randomPause(1520, 2106);
	try {
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ iframe
		//==console.log("Step 3: Refreshing iframe context and clicking 'Show more'...");
		const updatedIframe = document.querySelectorAll("iframe")[1];
		if (!updatedIframe) {
			throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω iframe");
		}
		const iframeDoc = updatedIframe.contentDocument || updatedIframe.contentWindow.document;
		if (!iframeDoc) {
			throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å document –≤–Ω—É—Ç—Ä–∏ iframe");
		}
		await randomPause(120, 306);

		// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ 'Show more'
		const buttonSelector = "div.user_info_about_show_button.s__fwb.s__h3";
		try {
			const buttonElement = await waitForElementInIframe(updatedIframe, buttonSelector);
			safeClick(buttonElement, "'–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é' button");
			
		} catch (error) {
			console.warn("'Show more' button not found. Skipping this step.");
		}
		await randomPause(120, 306);
		const selectors = {
			userCity: "div.user_info_header_info_user_city.s__h3 > a",
			userName: "div.user_info_header_info_user_name.s__fwb",
			userAge: "div.user_info_header_info_user_city.s__h3",
			registrationDate: "tr:nth-child(1) > td.user_info_about_additional_item_text"
		};


		let extractedData = {
			userCity: "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω",
			userName: "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω",
			userAge: null,
			registrationDate: null
		};

		try {
			let isBlocked = await waitForElementInIframe(updatedIframe, "div.user_info_blocked_date.s__fwb");
			if (isBlocked) {
				console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª–æ–∫–µ: ", isBlocked);
				return extractedData, true;
			}
		} catch (error) {}


		for (const [key, selector] of Object.entries(selectors)) {
			try {
				const element = await waitForElementInIframe(updatedIframe, selector);
				if (!element) throw new Error(`${key} —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
				let value = element.textContent.trim();
				console.log(key, value);

				if (key === "userAge") {
					const ageMatch = value.match(/\d+/);
					extractedData[key] = ageMatch ? parseInt(ageMatch[0], 10) : null;
				} else if (key === "registrationDate") {
					const dateMatch = value.match(/(\d{2}\.\d{2}\.\d{4})/);
					if (dateMatch) {
						const [day, month, year] = dateMatch[1].split(".");
						extractedData[key] = new Date(`${year}-${month}-${day}`);
					} else {
						throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã");
					}
				} else {
					extractedData[key] = value;
				}
				console.log(`‚úÖ Extracted ${key}:`, extractedData[key]);
			} catch (error) {
				console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ${key}:`, error);
			}
		}
		
		return extractedData;
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –≤ extractUserData:", error);
		return {
			userCity: "‚ùå –û—à–∏–±–∫–∞",
			userName: "‚ùå –û—à–∏–±–∫–∞",
			userAge: null,
			registrationDate: null
		};
	}
}



async function checkUserBehavior(chatMessages, profileName, userid) {
	const [phoneFound, rudeCheck] = await Promise.all([
		parsePhoneFirstTime(chatMessages, profileName, userid),
		checkPhoneAndRudeParallel(chatMessages, profileName, userid)
	]);
	return { phoneFound, isRude: rudeCheck.isRude };
}


/***************************************************
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø—Ä–æ—Ñ–∏–ª–µ–π
 ***************************************************/
async function scrollPage() {
  let contentDiv = document.querySelector("#content");
  if (!contentDiv) {
	console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.");
	return false;
  }
  let previousHeight = contentDiv.scrollHeight;
  window.scrollBy(0, window.innerHeight);
  await randomPause(3000, 5000);
  let newHeight = contentDiv.scrollHeight;
  return newHeight > previousHeight;
}

/***************************************************
 * –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
 ***************************************************/
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø–µ—Ä–µ–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π)
async function processProfiles(maxProfiles = 50) {
  let profilesProcessed = 0;
  let hasMoreProfiles = true;
  let context, iframeDoc;

  while (hasMoreProfiles && profilesProcessed < maxProfiles) {
	context = getUpdatedIframeContext();
	if (!context) {
	  console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è iframe. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é...");
	  continue;
	}
	({ iframeDoc } = context);
	await randomPause(600, 1500);
	let myUrl = iframeDoc.querySelector("#content > div > hlink").getAttribute("value");
	console.log(myUrl);
	let { userid, password } = parseUrlParams(myUrl);
	console.log("üîç –ü–æ–ª—É—á–∏–ª–∏ userid:", userid);
	
	let profileElements = iframeDoc.querySelectorAll(".people_near_content__item");
	if (profileElements.length === 0) {
	  console.warn("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.");
	  return;
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫
	for (let i = 0; i < profileElements.length && profilesProcessed < maxProfiles; i++) {
	  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
	  context = getUpdatedIframeContext();
	  if (!context) {
		console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ iframe. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é...");
		continue;
	  }
	  iframeDoc = context.iframeDoc;
	  profileElements = Array.from(iframeDoc.querySelectorAll(".people_near_content__item"));
	  let profile = profileElements[i];
	  if (!profile) break; // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞


	  //await randomPause(500, 1000);
	  let profileNickElement = profile.querySelector(".people_near_content__item__nick");
	  let profileName = profileNickElement.textContent.trim();
	  console.log(`üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å ${profileName}`);
	  let userCur = profile.getAttribute("data-id");
	  console.log(`üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º userCur ${userCur}`);



	  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –ß–°
	  let isBlacklisted = await checkBlacklist(profileName);
	  if (isBlacklisted) {
		console.warn(`‚õî –ü—Ä–æ—Ñ–∏–ª—å ${profileName} –≤ –ß–°, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
		continue;
	  }

	  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ
	  let isUserInDatabase = await checkUserInfo(profileName);
	  if (!isUserInDatabase) {
		console.warn(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ${profileName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤—ã–π.`);
	  }


	  const userID = 82702089; 
	  const password = "9a0a8250cdd5db70a57df75d3cabfe40";
	  let { userCity, userName, userAge, registrationDate } = await fetchData(userCur, userID, password);
	  userAge = userAge.replace(/[^\d]/g, "");

	  if (userAge <= 25) {
		console.warn("‚ö†Ô∏è ‚ö†Ô∏è –ú–æ–ª–æ–¥–æ–π");
		continue;
	  }

	  await randomPause(900, 1500); 
	  isBlacklisted = await checkBlacklistAndDate(profileName, registrationDate)
	  if (!isBlacklisted) {		
		if (!context) {
		  console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è iframe. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é...");
		  continue;
		}
		({ iframeDoc } = context);
		
		// üî• –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
		profileNickElement.scrollIntoView({ behavior: "smooth", block: "center" });
		await randomPause(700, 900); // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
		profileNickElement.click();
		await randomPause(3500, 4900); // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
		await userProcessing(profileName, userid, userCity, userName, userAge, registrationDate);
		await clickNearMenu();
		await randomPause(1300, 1800);


		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ fallback:
		context = getUpdatedIframeContext();
		iframeDoc = context ? context.iframeDoc : null;
	  }

	  await randomPause(900, 1900);
	  profilesProcessed++;
	}

	hasMoreProfiles = await scrollPage();
  }
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${profilesProcessed} –ø—Ä–æ—Ñ–∏–ª–µ–π.`);
}



/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞.
 * 
 * @param {number|string} userCur - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {number|string} userID - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} password - –ü–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: userCity, userName, userAge, registrationDate, userBlocked.
 */
async function fetchData(userCur, userID, password) {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∞–Ω–∞–ª–æ–≥ random.uniform –≤ Python.
  const randomValue = (Math.random() * (0.999999 - 0.000001) + 0.000001).toFixed(17);

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
  const url = `https://galaxy.mobstudio.ru/services/?userID=${userID}&password=${password}&a=whois&usercur=${userCur}&from=people_near&random=${randomValue}`;

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ Python-—Å–ª–æ–≤–∞—Ä—é headers.
  const headers = {
	"accept": "*/*",
	"accept-language": "en,ru;q=0.9,en-US;q=0.8",
	"dnt": "1",
	"priority": "u=1, i",
	"referer": "https://galaxy.mobstudio.ru/web/",
	"sec-ch-ua": `"Chromium";v="134", "Not:A-Brand";v="24", "Google Chrome";v="134"`,
	"sec-ch-ua-mobile": "?0",
	"sec-ch-ua-platform": `"Windows"`,
	"sec-fetch-dest": "empty",
	"sec-fetch-mode": "cors",
	"sec-fetch-site": "same-origin",
	"user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36",
	"x-galaxy-client-ver": "9.5",
	"x-galaxy-kbv": "352",
	"x-galaxy-lng": "ru",
	"x-galaxy-model": "chrome 133.0.0.0",
	"x-galaxy-orientation": "portrait",
	"x-galaxy-os-ver": "1",
	"x-galaxy-platform": "web",
	"x-galaxy-scr-dpi": "0.6666666865348816",
	"x-galaxy-scr-h": "1207",
	"x-galaxy-scr-w": "700",
	"x-galaxy-user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
  };

  // XPath-—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML.
  // –î–ª—è userBlocked –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
  const xpaths = {
	userCity: "//div[contains(@class, 'user_info_header_info_user_city') and contains(@class, 's__h3')]/a/text()",
	userName: "//div[contains(@class, 'user_info_header_info_user_name') and contains(@class, 's__fwb')]/text()",
	userAge: "//div[contains(@class, 'user_info_header_info_user_city') and contains(@class, 's__h3')]/text()",
	registrationDate: "//tr[1]/td[contains(@class, 'user_info_about_additional_item_text')]/text()"
	// userBlocked: "//div[contains(@class, 'user_blocked')]/text()"  // –ü—Ä–∏–º–µ—Ä XPath, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
  };

  try {
	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Fetch API.
	const response = await fetch(url, { headers });

	// –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É—Å–ø–µ—à–Ω—ã–π, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É (–∞–Ω–∞–ª–æ–≥ response.raise_for_status() –≤ Python).
	if (!response.ok) {
	  throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status} ${response.statusText}`);
	}

	// –ü–æ–ª—É—á–∞–µ–º Content-Type –æ—Ç–≤–µ—Ç–∞.
	const contentType = response.headers.get("Content-Type") || "";

	if (contentType.includes("application/json")) {
	  // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON ‚Äî –ø–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ.
	  const data = await response.json();
	  return data;
	} else {
	  // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
	  const text = await response.text();
	  // –ò—Å–ø–æ–ª—å–∑—É–µ–º DOMParser –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML-—Å—Ç—Ä–æ–∫–∏.
	  const parser = new DOMParser();
	  const doc = parser.parseFromString(text, "text/html");

	  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è XPath-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
	  function getXPathResult(doc, xpath) {
		// document.evaluate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç XPathResult, –∏—Å–ø–æ–ª—å–∑—É–µ–º STRING_TYPE –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
		const result = doc.evaluate(xpath, doc, null, XPathResult.STRING_TYPE, null);
		return result.stringValue.trim();
	  }

	  // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É XPath.
	  const result = {};
	  for (const [key, path] of Object.entries(xpaths)) {
		let value = getXPathResult(doc, path) || '';

		// –î–ª—è registrationDate —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:".
		if (key === "registrationDate") {
		  value = value.replace("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", "").trim();
		}
		// –î–ª—è userAge —É–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å " –≥–æ–¥–∞" (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ).
		if (key === "userAge") {
		  value = value.replace(" –≥–æ–¥–∞", "").trim();
		}
		result[key] = value;
	  }
	  return result;
	}
  } catch (error) {
	console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
	throw error;
  }
}

/* –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ chrome console –∏–ª–∏ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ):
(async () => {
  const userCur = 82859343;
  const userID = 82702089;
  const password = "9a0a8250cdd5db70a57df75d3cabfe40";

  try {
	const { userCity, userName, userAge, registrationDate, userBlocked } = await fetchData(userCur, userID, password);
	console.log("userCity:", userCity);
	console.log("userName:", userName);
	console.log("userAge:", userAge); // –û–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: '23'
	console.log("registrationDate:", registrationDate); // –û–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: '30.01.2025'
	console.log("userBlocked:", userBlocked);
  } catch (error) {
	console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
  }
})();
*/



// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
async function userProcessing(profileName, userid, userCity, userName, userAge, registrationDate) {
  let context = getUpdatedIframeContext();
  if (!context) {
	console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...");
  }
  let { iframeDoc } = context;
  await randomPause(600, 996);
  console.log("üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...");
  //const userCur = 82859343;

  //const { userCity, userName, userAge, registrationDate, userBlocked } = await extractUserData();


  console.log("–ì–æ—Ä–æ–¥:", userCity);

  // if (userBlocked) {
  //   console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
  //   await addToBlacklist(profileName, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
  //   return;
  // }

  if (userCity !== "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω") {
	const isRussian = await isCityInDatabase(userCity);
	console.warn(`üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞:`, isRussian);
	if (!isRussian) {
	  console.warn(`üö® –ì–æ—Ä–æ–¥ –Ω–µ –≤ –†–§. –î–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°.`);
	  await addToBlacklist(profileName, `–ì–æ—Ä–æ–¥ –Ω–µ –≤ –†–§: ${userCity}`);
	  await clickNearMenu();
	  //await handleUser(iframeDoc, profileName);
	  return;
	}
  }

  await addUserIfNotExists(profileName, userName, registrationDate, userCity, userAge);

  if (registrationDate) {
	const currentDate = new Date();
	const registeredDays = Math.floor((currentDate - registrationDate) / (1000 * 60 * 60 * 24));
	if (registeredDays > BLACKLIST_DAYS) {
	  console.warn(`üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '${profileName}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ${registeredDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥. –î–æ–±–∞–≤–ª—è–µ–º –≤ –ß–°.`);
	  await addToBlacklist(profileName, `–°—Ç–∞—Ä–∞—è —Ä–µ–≥–∞: ${registeredDays}`);
	  //await clickFallback();
	  //await handleUser(iframeDoc, profileName);
	  return;
	}
  }

  console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '${profileName}'...`);
  await clickMessageButton();

  const isLocked = await lockUserProcessing(profileName);
  if (!isLocked) {
	console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –±—Ä–∞—É–∑–µ—Ä–µ...");
	//await clickFallback();
	return;
  }

  try {
	// –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è processUserMessage(), –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–∂–µ —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	// –ï—Å–ª–∏ —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞ –Ω—É–∂–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤; –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –æ–±—Ä–∞–±–æ—Ç–∫—É
	await processUserMessage(profileName, userCity, userAge, userid);
	//await clickFallback();
	await clickNearMenu();
  } finally {
	await unlockUserProcessing(profileName);
  }
}
/***************************************************
 * –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 ***************************************************/
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ blacklist (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π)
async function checkBlacklist(profileName) {
  await window.waitForSupabase();
  try {
	const { data, error } = await window.supabaseClient
	  .from("blacklist")
	  .select("user_nick")
	  .eq("user_nick", profileName)
	  .maybeSingle();
	if (error) return false;
	return data !== null;
  } catch (err) {
	console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ß–°:", err);
	return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
async function checkUserInfo(profileName) {
  await window.waitForSupabase();
  try {
	const { data, error } = await window.supabaseClient
	  .from("user_info_galaxy")
	  .select("user_nick")
	  .eq("user_nick", profileName)
	  .maybeSingle();
	if (error) {
	  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ user_info:", error.message);
	  return false;
	}
	return data !== null;
  } catch (err) {
	console.error("‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ user_info:", err);
	return false;
  }
}


/***************************************************
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (Main Loop)
 ***************************************************/
// –í–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
(async () => {
  let profileName = "";

  try {
	console.log("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ Supabase –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π...");
	await waitForSupabase();
	if (!window.supabaseClient) {
	  console.error("‚ùå Supabase client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
	  return;
	}
	let context = getUpdatedIframeContext();
	if (!context) {
		console.warn("‚ö†Ô∏è iframe –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã—Ö–æ–¥–∏–º...");
		return;
	}
	let { iframeDoc } = context;
	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
	let iterationCount = 0;
	for (let i = 0; i < ITER; i++) {
	  try {
		  document.querySelector("#root > div > div.auth-user > aside > div.mdc-drawer__content.drawer__content.scroll > nav > a:nth-child(2)").click();
		  await randomPause(900, 1336);

	  } catch (error) {};
	 
	  if (iterationCount >= 10) {
		console.log("–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...");
		// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
		// clearMimicMemory();
		iterationCount = 0;
		await randomPause(500, 836);
	  }
	  await processProfiles(50);
	  //await clickFallback();
	  iterationCount++;
	  break;
	  await randomPause(700, 1836);
	}
	console.log("üéâ –í—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
  } catch (error) {
	console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:", error);
  }
})();
